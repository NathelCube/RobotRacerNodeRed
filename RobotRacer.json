[
    {
        "id": "13845d90ca241cef",
        "type": "tab",
        "label": "Master Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "af12c5d524d1fd46",
        "type": "tab",
        "label": "Roboter 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c7c9fdf7f99de7a",
        "type": "tab",
        "label": "Roboter 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7aa9951234ca3c4a",
        "type": "tab",
        "label": "Roboter 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3c78f5faa301e154",
        "type": "tab",
        "label": "Roboter 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "23ebc1f0dcbb825b",
        "type": "ui_group",
        "name": "Spieler 1 (Spielleiter)",
        "tab": "672fd3bf75c8a24e",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e341ce52d8147dfa",
        "type": "serial-port",
        "serialport": "/dev/serial0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "672fd3bf75c8a24e",
        "type": "ui_tab",
        "name": "Spieler 1 (Spielleiter)",
        "icon": "wi-wu-sunny",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0491d7f5bff52ea3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#184ecd",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Robokart",
                "default": "#4B7930",
                "baseColor": "#94cbff",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#184ecd",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#184ecd",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#4878ea",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#184ecd",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Robot Racer",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "2fb73653abb3596b",
        "type": "ui_tab",
        "name": "Spieler 2",
        "icon": "fa-fire",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a70c8a7fa66727bb",
        "type": "ui_group",
        "name": "old",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4a5d2faba249134a",
        "type": "ui_group",
        "name": "alle Nodes",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "59992c0093a8fb96",
        "type": "ui_tab",
        "name": "Spieler 3",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6a143f437c57f2fc",
        "type": "ui_tab",
        "name": "Spieler 4",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b33258f866d9f349",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "74d636af75945057",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "6646f3f3e349f3fb",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "cd033ed34c069fde",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "bfdfe0321d978569",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "6f590f3ceb639612",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "d065053060b8d953",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": 2,
        "height": 1
    },
    {
        "id": "6ca04b536e9c082e",
        "type": "ui_spacer",
        "z": "1c7c9fdf7f99de7a",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "195ca10f45271cd2",
        "type": "ui_group",
        "name": "Mastersteuerung",
        "tab": "672fd3bf75c8a24e",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "337e474ff762dded",
        "type": "ui_group",
        "name": "Spieler 2",
        "tab": "2fb73653abb3596b",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5e8a52f455b56a75",
        "type": "ui_group",
        "name": "Spieler 3",
        "tab": "59992c0093a8fb96",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "36d2a87e1baa759c",
        "type": "ui_group",
        "name": "Spieler 4",
        "tab": "6a143f437c57f2fc",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d07b30721313ae38",
        "type": "function",
        "z": "13845d90ca241cef",
        "name": "DatenZusammenfügen",
        "func": "//initialisierungsobjekt speed definieren\nlet speed = {\n  links: 127,  \n  rechts: 127\n}\n\n//Vorherige Daten werden abgerufen\nvar robotCount = context.get('robotCount')||1;\nvar speedArray = context.get('speedArray')||[speed];\nvar notAusNichtGedrueckt = context.get(\"notAusNichtGedrueckt\") || false;\n\n//Variablen definieren\nvar dataToSend = \"\";\nvar robot_nr;\n\n//Not Aus aktualisieren\nif (msg.topic == \"Not-Aus\") {\n    notAusNichtGedrueckt = msg.payload;\n}\n\n//Anzahl Roboter aktualisieren\nif(msg.topic === \"robotCount\"){\n    robotCount = msg.payload;\n    context.set('robotCount',robotCount);\n}\n\n\n\n//Die grösse des Speed-Arrays verändern, anhand der Anzahl Roboter, die aktiv sind\n//Array vergrössern\nwhile(speedArray.length < robotCount){\n    speedArray.push({links:127, rechts:127});\n}\n\n//Array verkleinern (geht nicht kleiner als 1)\nwhile(speedArray.length > robotCount){\n    speedArray.pop();\n}\n\n\n\n//Die Geschwindigkeit eines Motors an den richtigen Ort im Array schreiben\nif(msg.topic === \"speedBothMotors\"){\n    robot_nr = msg.payload[2];\n    //Nur wenn der Roboter aktiv ist\n    if(robot_nr <= robotCount){\n        speedArray[robot_nr - 1].links = Math.floor(msg.payload[0]);\n        speedArray[robot_nr - 1].rechts = Math.floor(msg.payload[1]);\n    }\n\n}\n\n\n\n//Daten speichern\ncontext.set('speedArray', speedArray);\ncontext.set(\"notAusNichtGedrueckt\", notAusNichtGedrueckt);\n\n//Daten zusammenfügen\ndataToSend = robotCount.toString();\n\n\n\nspeedArray.forEach(function(item){\n    dataToSend = dataToSend + \",\" + item.links.toString() + \",\" + item.rechts.toString();\n});\n\n\n//Bei Not-Aus alle Roboter stillsetzen\nif (notAusNichtGedrueckt == false) {\n    dataToSend = [4,127,\"testtest123456789abcdefghijklmopq\",127,127,127,127];\n    dataToSend = dataToSend.join();\n}\n\n//bei jedem CLK Impuls werden die Daten gesendet\nmsg.payload = dataToSend;\nif(msg.topic === \"CLK\"){\n    msg.topic = \"motorData\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 380,
        "wires": [
            [
                "83e5148892207f38"
            ]
        ]
    },
    {
        "id": "0cf45c5f6f3262b2",
        "type": "link in",
        "z": "13845d90ca241cef",
        "name": "Steuerdaten",
        "links": [
            "186898766ecc48d5",
            "1ef0a633c809ac32",
            "bb90b13588fd71f2",
            "2440a5f2ebba9867",
            "ca555ff73b99e45c",
            "ad413aa44be512d9"
        ],
        "x": 230,
        "y": 380,
        "wires": [
            [
                "01d22fedd34bbcba",
                "d07b30721313ae38"
            ]
        ],
        "l": true
    },
    {
        "id": "87bcb3e223d18137",
        "type": "inject",
        "z": "13845d90ca241cef",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "d07b30721313ae38"
            ]
        ]
    },
    {
        "id": "e75f816ac7f88a14",
        "type": "serial in",
        "z": "13845d90ca241cef",
        "name": "",
        "serial": "e341ce52d8147dfa",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "eb2d8b77036f3aa0",
                "73901a071c6bdb9d"
            ]
        ]
    },
    {
        "id": "eb2d8b77036f3aa0",
        "type": "debug",
        "z": "13845d90ca241cef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 900,
        "wires": []
    },
    {
        "id": "73901a071c6bdb9d",
        "type": "link out",
        "z": "13845d90ca241cef",
        "name": "Sensordaten",
        "mode": "link",
        "links": [
            "2627f0c046c96d16",
            "664d7f03921b4723",
            "c4d7ec9645873569",
            "78ea845c1b153304",
            "ab4a8b23429355bd",
            "9b76144811102944",
            "25e4ef47329bdfcf",
            "d0cb152933e42b77"
        ],
        "x": 690,
        "y": 780,
        "wires": [],
        "l": true
    },
    {
        "id": "df80bb9fb65a5ea1",
        "type": "debug",
        "z": "13845d90ca241cef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 300,
        "wires": []
    },
    {
        "id": "01d22fedd34bbcba",
        "type": "debug",
        "z": "13845d90ca241cef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "bfc31b720c3638f6",
        "type": "link out",
        "z": "13845d90ca241cef",
        "name": "Spielstatus",
        "mode": "link",
        "links": [
            "523cca80ce07b6f6",
            "da82dad4f7f7d50c",
            "96a7d64498f0814e",
            "5e81d2fe580b3edd",
            "c5f04cf70acddc9d"
        ],
        "x": 970,
        "y": 1400,
        "wires": [],
        "l": true
    },
    {
        "id": "83e5148892207f38",
        "type": "delay",
        "z": "13845d90ca241cef",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "df80bb9fb65a5ea1"
            ]
        ]
    },
    {
        "id": "f2e36e7b2dcee4e5",
        "type": "function",
        "z": "13845d90ca241cef",
        "name": "spielStatus",
        "func": "var spielStatus = context.get(\"spielStatus\") || \"Spiel lauft nicht\";\nvar hauptschalter = context.get(\"hauptschalter\") || false;\n\n\n//Variablen initialisieren\nvar stopImpuls = false;\nvar startImpuls = false;\nvar roboterFertig = false;\nvar roboterFertigNr = 0;\nvar countdownStart = false;\nvar countdownFertig = false;\n\n\n\n\n\n//Stop setzen\nif(msg.topic === \"stop\") {\n    stopImpuls = true;\n}\n\n\n//Startimpuls setzen, wenn alle Bedingungen erfüllt sind\nif(msg.topic === \"start\" && stopImpuls == false) {\n    startImpuls = true;\n}\n\n\n\n//Ein Roboter ist fertig\nif(msg.topic === \"fertig\") {\n    roboterFertig = true;\n    roboterFertigNr = msg.payload;\n}\n\n//Impuls Countdown ist fertig\nif (msg.topic == \"Countdown Fertig\") {\n    countdownFertig = true;\n}\n\nswitch(spielStatus) {\n    case \"Spiel lauft\":\n        //Spiel wurde mit Button gestoppt\n        if (stopImpuls == true) {\n            spielStatus = \"Spiel lauft nicht\";\n        }\n        \n        //Ein Roboter hat das Spiel beendet\n        if (roboterFertig == true) {\n            spielStatus = \"Spiel lauft nicht\";\n        }\n        \n        break;\n        \n        \n    case \"Der Countdown lauft\":\n\n        //Wenn Countdown fertig ist, startet das Spiel\n        if (countdownFertig == true) {\n            spielStatus = \"Spiel lauft\";\n        }\n        \n        break;\n        \n    case \"Vorbereiten\":\n        //Spiel wurde mit Button gestartet\n        if (startImpuls == true) {\n            spielStatus = \"Der Countdown lauft\";\n            \n            //Setze Variable um Countdown zu starten\n            countdownStart = true;\n        }\n        //Spiel wurde mit Button gestoppt\n        if (stopImpuls == true) {\n            spielStatus = \"Spiel lauft nicht\";\n        }\n        break;\n        \n    case \"Spiel lauft nicht\":\n        \n        //Spieler hat einmal Start gedrückt\n        if (startImpuls == true) {\n            spielStatus = \"Vorbereiten\";\n            \n        }\n    \n        break;    \n        \n        \n    default:\n        node.warn(\"Kein gültiger Spielstatus, der Status heisst: \" + spielStatus)\n        break;\n}\n\n\n\ncontext.set(\"spielStatus\", spielStatus);\n\n//Spielstatus senden\nmsg.topic = \"Spiel Status\";\nmsg.payload = spielStatus;\n\n//Wenn der Countdown startet, werden zwei msg gesendet\nif (countdownStart == true) {\n    var msg2 = {\n        topic: \"Countdown Start\",\n        payload: true\n    }\n    return [msg, msg2];\n} else {\n    return msg;\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "bfc31b720c3638f6",
                "78864685b97d2864",
                "40bdbc8fe1bcbaf3"
            ],
            [
                "7fc509b78b3b3920"
            ]
        ]
    },
    {
        "id": "aa774b4c4f1b2c7a",
        "type": "comment",
        "z": "13845d90ca241cef",
        "name": "Sensordaten weiterleiten",
        "info": "Hier werden die Sensordaten an die einzelnen Flows weitergeleitet",
        "x": 210,
        "y": 720,
        "wires": []
    },
    {
        "id": "267f337a14cbf8ea",
        "type": "comment",
        "z": "13845d90ca241cef",
        "name": "Spielsteuerung",
        "info": "",
        "x": 240,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c66959397638eb12",
        "type": "comment",
        "z": "13845d90ca241cef",
        "name": "Roboter Geschwindigkeit senden",
        "info": "",
        "x": 210,
        "y": 240,
        "wires": []
    },
    {
        "id": "11d032415ccbc498",
        "type": "ui_button",
        "z": "13845d90ca241cef",
        "name": "",
        "group": "195ca10f45271cd2",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "stop",
        "topicType": "str",
        "x": 210,
        "y": 1480,
        "wires": [
            [
                "f2e36e7b2dcee4e5"
            ]
        ]
    },
    {
        "id": "9d38d05819ad9f91",
        "type": "ui_button",
        "z": "13845d90ca241cef",
        "name": "",
        "group": "195ca10f45271cd2",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "start",
        "topicType": "str",
        "x": 210,
        "y": 1400,
        "wires": [
            [
                "f2e36e7b2dcee4e5"
            ]
        ]
    },
    {
        "id": "15227b16ba1dd957",
        "type": "link in",
        "z": "13845d90ca241cef",
        "name": "Roboter hat Rennen beendet",
        "links": [
            "2cd18ef0f8797cdb",
            "f1d221d6cf3d4837",
            "c828b604d822fbdf",
            "6c94ee7e41929ad9",
            "8193e062eb7feb0f"
        ],
        "x": 280,
        "y": 1640,
        "wires": [
            [
                "f2e36e7b2dcee4e5",
                "40bdbc8fe1bcbaf3"
            ]
        ],
        "l": true
    },
    {
        "id": "6c3805b0332ae7e2",
        "type": "ui_text",
        "z": "13845d90ca241cef",
        "group": "23ebc1f0dcbb825b",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Spielstatus:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1390,
        "y": 1220,
        "wires": []
    },
    {
        "id": "7fc509b78b3b3920",
        "type": "delay",
        "z": "13845d90ca241cef",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1220,
        "y": 1560,
        "wires": [
            [
                "f7de274b7b24d1f7"
            ]
        ]
    },
    {
        "id": "f7de274b7b24d1f7",
        "type": "change",
        "z": "13845d90ca241cef",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Countdown Fertig",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 1560,
        "wires": [
            [
                "f2e36e7b2dcee4e5"
            ]
        ]
    },
    {
        "id": "78864685b97d2864",
        "type": "function",
        "z": "13845d90ca241cef",
        "name": "reset Countdown",
        "func": "\nif (msg.payload != \"Der Countdown lauft\") {\n        msg.reset = true;\n        return msg;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1560,
        "wires": [
            [
                "7fc509b78b3b3920"
            ]
        ]
    },
    {
        "id": "45eca3b989a3e641",
        "type": "ui_text",
        "z": "13845d90ca241cef",
        "group": "337e474ff762dded",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Spielstatus:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1390,
        "y": 1260,
        "wires": []
    },
    {
        "id": "859e54f86282ef5d",
        "type": "ui_text",
        "z": "13845d90ca241cef",
        "group": "5e8a52f455b56a75",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Spielstatus:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1390,
        "y": 1300,
        "wires": []
    },
    {
        "id": "9123ba6bccc99212",
        "type": "ui_text",
        "z": "13845d90ca241cef",
        "group": "36d2a87e1baa759c",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Spielstatus:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1390,
        "y": 1340,
        "wires": []
    },
    {
        "id": "40bdbc8fe1bcbaf3",
        "type": "function",
        "z": "13845d90ca241cef",
        "name": "Text für Spielstatus",
        "func": "var gewinner = context.get(\"gewinner\") || \"1\";\nvar text = \"\";\nvar status = msg.payload;\n\n//Ein Spieler ist fertig\nif (msg.topic == \"fertig\") {\n    gewinner = msg.payload;\n}\n\n\nswitch(status) {\n    case \"Spiel lauft\":\n        text = \"Das Spiel läuft! Um ein neues Spiel zu beginnen muss Spieler 1 Stop drücken\";\n        \n        break;\n        \n        \n    case \"Der Countdown lauft\":\n        text = \"Der Countdown läuft, das Spiel beginnt in 3 Sekunden!\";\n        break;\n      \n        \n    case \"Spiel lauft nicht\":\n        text = \"Spieler \" + gewinner + \" hat gewonnen! Um ein neues Spiel zu beginnen muss Spieler 1 Start drücken\";\n        break;    \n  \n        \n    case \"Vorbereiten\":\n        text = \"Die Spieler müssen ihre Roboter in das Startfeld fahren. Wenn alle bereit sind kann Spieler 1 nochmals Start drücken!\"\n        break;\n\n\n    default:\n        text = \"Kein gültiger Spielstatus, der Status heisst: \" + status;\n        break;\n}\n\ncontext.set(\"gewinner\", gewinner);\n\n\nmsg.payload = text;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1220,
        "wires": [
            [
                "6c3805b0332ae7e2",
                "f64230c5c0e91dad",
                "45eca3b989a3e641",
                "859e54f86282ef5d",
                "9123ba6bccc99212"
            ]
        ]
    },
    {
        "id": "f64230c5c0e91dad",
        "type": "debug",
        "z": "13845d90ca241cef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5f8f076a44e437a6",
        "type": "link in",
        "z": "13845d90ca241cef",
        "name": "Spiel beenden, Roboter inaktiv",
        "links": [
            "796ad5a87cec17c0",
            "f1d221d6cf3d4837",
            "e7cbe10bba61f295",
            "7ed5b8d2b2aec65e",
            "6f5e7c39249e6e11"
        ],
        "x": 280,
        "y": 1520,
        "wires": [
            [
                "f2e36e7b2dcee4e5"
            ]
        ],
        "l": true
    },
    {
        "id": "2eba1aa59709cbf7",
        "type": "ui_slider",
        "z": "af12c5d524d1fd46",
        "name": "",
        "label": "",
        "tooltip": "Den Roboter lenken",
        "group": "23ebc1f0dcbb825b",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "LeftRight",
        "topicType": "str",
        "min": "-60",
        "max": "60",
        "step": "1",
        "className": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "c1f9d6ba4236b7d8"
            ]
        ]
    },
    {
        "id": "a31b9110deb28705",
        "type": "ui_slider",
        "z": "af12c5d524d1fd46",
        "name": "",
        "label": "",
        "tooltip": "Geschwindigkeit regeln",
        "group": "23ebc1f0dcbb825b",
        "order": 4,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "Speed",
        "topicType": "str",
        "min": "-127",
        "max": "127",
        "step": "1",
        "className": "",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "c1f9d6ba4236b7d8"
            ]
        ]
    },
    {
        "id": "c8ad844ad7fca1d0",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Roboter-Befehle Umrechnen",
        "func": "//Vorherige Daten werden abgerufen\nvar LeftRight = context.get('LeftRight')||0; //Initialwert 0, wenn es Variable noch nicht gibttt\nvar Speed = context.get('Speed')||0;\n\n//Variablen definieren\nvar speedLeft = 0;\nvar speedRight = 0;\nvar zuViel = 0;\n\n//Die Daten werden ins Programm übernommen\nif(msg.topic === \"LeftRight\"){\n    LeftRight = msg.payload;\n}\n\nif(msg.topic === \"Speed\"){\n    Speed = msg.payload;\n}\n\n//Eingabedaten werden zwischengespeichert\ncontext.set('LeftRight',LeftRight);\ncontext.set('Speed',Speed);\n\n\n\n//Speed wird gedrosselt\nSpeed = Speed;\n\n\n//Die Geschwindigkeiten der beiden Motoren werden anhand der Eingaben berechnet\nif (LeftRight < 0) {\n    //Roboter lenkt nach links\n    speedRight = Speed;\n    speedLeft = (LeftRight * 2 + 127) * Speed / 127;\n    \n} else if (LeftRight > 0) {\n    //Roboter lenkt nach rechts\n    speedLeft = Speed;\n    speedRight = (-LeftRight * 2 + 127) * Speed / 127;\n    \n    //Roboter fährt geradeaus\n} else {\n    speedLeft = Speed;\n    speedRight = Speed;\n}\n\n\n\n\n\n\n\n\n//Wenn der \"speed\"-Slider nahe bei 0 ist, werden beide Motoren auf 0 gestellt\nif (Speed <= 10 && Speed >= -10) {\n    speedLeft = 0;\n    speedRight = 0;\n}\n\n\n//Die Geschwindigkeit wird von -127 bis 127 zu 0 bis 255 umskaliert\n//speedLeft = speedLeft + 127;\n//speedRight = speedRight + 127;\n\n//Daten ausgeben\nmsg.topic = \"speedBothMotors\"\nmsg.payload = [speedLeft, speedRight];\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 560,
        "wires": [
            [
                "cdf28f9d8c1dacea",
                "70ac477de2c9d6a1"
            ]
        ]
    },
    {
        "id": "c1f9d6ba4236b7d8",
        "type": "delay",
        "z": "af12c5d524d1fd46",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 560,
        "wires": [
            [
                "c8ad844ad7fca1d0",
                "0b3dd75a5bd89273"
            ]
        ]
    },
    {
        "id": "bb90b13588fd71f2",
        "type": "link out",
        "z": "af12c5d524d1fd46",
        "name": "Steuerdaten",
        "mode": "link",
        "links": [
            "0cf45c5f6f3262b2"
        ],
        "x": 2710,
        "y": 560,
        "wires": [],
        "l": true
    },
    {
        "id": "664d7f03921b4723",
        "type": "link in",
        "z": "af12c5d524d1fd46",
        "name": "Sensordaten",
        "links": [
            "73901a071c6bdb9d"
        ],
        "x": 150,
        "y": 980,
        "wires": [
            [
                "a3065bd7368905a2"
            ]
        ],
        "l": true
    },
    {
        "id": "a3065bd7368905a2",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Sensordaten filtern",
        "func": "var roboterNr = flow.get(\"robotNr\") || 1;\n\n\n//Farben definieren\nvar sensordatenArray = msg.payload.split(\",\");\n//code wird nur ausgeführt, wenn es an diesen Roboter adressiert ist\nif(sensordatenArray[0] === \"R\" + roboterNr.toString()){\n    var L1 = sensordatenArray[1];\n    var R1 = sensordatenArray[2];\n    msg.topic = \"sensorDaten\";\n    \n    //Daten ausgeben\n    msg.payload = [L1, R1];\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 980,
        "wires": [
            [
                "6a139813cb9fe2a3",
                "44597ac2374be8cf"
            ]
        ]
    },
    {
        "id": "b06f05fed0161799",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Roboter-Nummer anfügen",
        "func": "//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n//Bei Programmbeginn Roboternummer festlegen\nif(msg.topic == \"robotNr\"){\n    robotNr = msg.payload;\n}\n\n\nif(msg.topic == \"speedBothMotors\"){\n    msg.topic = \"speedBothMotors\";\n    msg.payload[2] = robotNr;\n    return msg;\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 560,
        "wires": [
            [
                "9de808be68a22c69",
                "bb90b13588fd71f2",
                "b5a5ce5c98eb0ddb"
            ]
        ]
    },
    {
        "id": "6a139813cb9fe2a3",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Farbbereichserkennung Roboter1",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3600, 2100, 1350, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"rot\", \"blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 980,
        "wires": [
            [
                "7b37e5adce89e41c"
            ]
        ]
    },
    {
        "id": "7b37e5adce89e41c",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Farbe festlegen",
        "func": "//Vorherige Daten abrufen\nvar festgelegteFarbe = context.get(\"festgelegteFarbe\")||\"undefiniert\"; //die Farbe, welche als Output ausgegeben wird\nvar zaehlerFarbe = context.get(\"zaehlerFarbe\")||\"undefiniert\"; //Die Farbe die zuletzt erkannt wurde, und gezählt wird\nvar zaehler = context.get(\"zaehler\")||0; //Zählt wie oft schon die gleiche Farbe erkannt wurde\nvar hatGeaendert = false;\n\n//vorgabeZaehler gibt an, wie oft die gleiche Farbe erkennt werden muss, bis die neue Farbe festgelegt wird\nvar vorgabeZaehler = 2;\n\nif (msg.topic == \"farben\") {\n    //Die Farbe des Sensors L1 wird hier verwendet \n    var neueFarbe = msg.payload[1];\n    //Wenn die Farbe ungleich der festgelegten Farbe ist\n    if (neueFarbe != festgelegteFarbe) {\n        //Wenn zuletzt eine andere Farbe gemessen wurde wird der Zähler zurückgesetzt\n        if (neueFarbe != zaehlerFarbe) {\n            zaehlerFarbe = neueFarbe;\n            zaehler = 0;\n        }\n    \n        zaehler += 1;\n        //Wenn der Zähler die Vorgabe ereicht hat wird die neue Farbe festgelegt\n        if (zaehler == vorgabeZaehler) {\n            festgelegteFarbe = neueFarbe;\n            hatGeaendert = true;\n        }\n    }\n    //Daten speichern\n    context.set(\"festgelegteFarbe\", festgelegteFarbe);\n    context.set(\"zaehlerFarbe\", zaehlerFarbe);\n    context.set(\"zaehler\", zaehler);\n} \n\n\n\n//Farbe ausgeben bei jedem Zyklussignal\nif (hatGeaendert == true) {\n    msg.topic = \"Farbe\";\n    msg.payload = festgelegteFarbe;\n    return msg;\n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 980,
        "wires": [
            [
                "111d478f4ed7bfea",
                "2e37486f8014f8a5",
                "d90c54a2ef1de69a"
            ]
        ]
    },
    {
        "id": "5c1c3f34db55c1a5",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 1130,
        "y": 1600,
        "wires": [
            [
                "d90c54a2ef1de69a"
            ]
        ]
    },
    {
        "id": "eea74f57572a6aed",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar itemAktiv = context.get(\"itemAktiv\") || false;\nvar anzahlRoboter = context.get(\"anzahlRoboter\") || 1;\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Variablen definieren\n\nvar roboterAktiv;\n\n\n\n\n\n\n\n//Anzahl Roboter aktualisieren\nif (msg.topic == \"robotCount\") {\n    anzahlRoboter = msg.payload;\n}\n\n\n//itemAktiv aktualisieren\nif (msg.topic == \"itemAufRoboter\") {\n    itemAktiv = msg.payload;\n}\n\n//node.warn(roboterNummer.toString() + anzahlRoboter);\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else if (msg.payload == \"Vorbereiten\"){\n        spielLauft = false;\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n}\n\n//Definieren ob der Roboter aktiv ist oder nicht\n//Er ist aktiv wenn die Anzahl Roboter nicht kleiner ist als seine Nummer und wenn das Spiel läuft\nif ((roboterNummer <= anzahlRoboter) && (spielLauft == true)) {\n    roboterAktiv = true;\n} else {\n    roboterAktiv = false;\n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n        //Item wirkt auf diesen Roboter\n        else if (itemAktiv == true) {\n            Zustand = \"Beeinflusst von Item\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Beeinflusst von Item\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        //Item ist nicht mehr aktiv\n        else if (itemAktiv == false) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n      \n      \n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (roboterAktiv == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Item wirkt auf diesen Roboter\n            else if (itemAktiv == true) {\n                Zustand = \"Beeinflusst von Item\";\n            }\n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"itemAktiv\", itemAktiv);\ncontext.set(\"anzahlRoboter\", anzahlRoboter);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "5dc30cf6fdf7a97f",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1540,
        "wires": []
    },
    {
        "id": "d09b659b61512779",
        "type": "link in",
        "z": "af12c5d524d1fd46",
        "name": "RobotCount",
        "links": [
            "405564b062d28697"
        ],
        "x": 1130,
        "y": 1500,
        "wires": [
            [
                "d90c54a2ef1de69a"
            ]
        ],
        "l": true
    },
    {
        "id": "cdf28f9d8c1dacea",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Geschwindigkeit mit Status ändern",
        "func": "//initialisierungsobjekt speed definieren\nlet speed = {\n  links: 127,  \n  rechts: 127\n}\n\n\n\n\n\n\n\n//Eingabe abrufen\nvar speedEingabe = context.get(\"speedEingabe\") || speed;\n\n\n\nif (msg.topic == \"Zustand\") {\n    //Zustand definieren\n    var Zustand = msg.payload;\n    \n    //Variablen definieren\n    let speedAusgabe = {\n        links: speedEingabe.links,\n        rechts: speedEingabe.rechts\n    }\n    \n    if (Zustand == \"Normal Fahren\") {\n        speedAusgabe.links = speedEingabe.links / 3;\n        speedAusgabe.rechts = speedEingabe.rechts / 3;\n    }\n\n\n    if (Zustand == \"Boost\") {\n        speedAusgabe.links = speedEingabe.links;\n        speedAusgabe.rechts = speedEingabe.rechts;\n    }\n    \n    if (Zustand == \"Langsamer\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    if (Zustand == \"Freie Fahrt\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    //Roboter fährt rückwärts, wenn er im Abseits ist\n    if (Zustand == \"Abseits der Strecke\") {\n        speedAusgabe.links = -22;\n        speedAusgabe.rechts = -22;\n    }\n\n    //Roboter anhalten, wenn er nicht aktiv ist\n    if (Zustand == \"Nicht Aktiv\") {\n        speedAusgabe.links = 0;\n        speedAusgabe.rechts = 0;\n    }\n    \n    //Geschwindigkeit runden\n    speedAusgabe.links = Math.floor(speedAusgabe.links);\n    speedAusgabe.rechts = Math.floor(speedAusgabe.rechts);\n    \n\n    //Geschwindigkeit ausgeben und umskalieren\n    msg.topic = \"speedBothMotors\"\n    msg.payload = [speedAusgabe.links + 127, speedAusgabe.rechts + 127];\n    return msg;\n    \n\n} else if (msg.topic == \"speedBothMotors\") {\n    //Geschwindigkeit aktualisieren und runden\n    speedEingabe.links = Math.floor(msg.payload[0]);\n    speedEingabe.rechts = Math.floor(msg.payload[1]);\n    context.set(\"speedEingabe\", speedEingabe);\n    \n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 560,
        "wires": [
            [
                "b06f05fed0161799",
                "899b9504e392f569"
            ]
        ]
    },
    {
        "id": "899b9504e392f569",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 680,
        "wires": []
    },
    {
        "id": "c56eb92f95611d9a",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 800,
        "wires": []
    },
    {
        "id": "70ac477de2c9d6a1",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 620,
        "wires": []
    },
    {
        "id": "111d478f4ed7bfea",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 920,
        "wires": []
    },
    {
        "id": "44597ac2374be8cf",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 920,
        "wires": []
    },
    {
        "id": "1d8e1f99a14ef2b3",
        "type": "change",
        "z": "af12c5d524d1fd46",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "robotNr",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2e37486f8014f8a5",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Position festlegen",
        "func": "//Daten abrufen\nvar farbe = context.get(\"farbe\") || \"schwarz\";\nvar position = context.get(\"position\") || 10;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar runden = context.get(\"runden\") || 0;\n\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n\n//Wenn Spiel nicht mehr läuft, wird alles initialisiert\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft nicht\" || msg.payload == \"Der Countdown lauft\") {\n        position = 10;\n        runden = 0;        \n    }\n\n}\n\n\n\n\n//State Machine\nswitch(position) {\n\n        \n    case 10: //Start\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 20;\n        }\n        break;\n    case 20: //Erstes Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 30;\n        }\n        break; \n        \n        \n    case 30: //Erster Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"schwarz\") {\n            position = 40;\n        }\n        break; \n        \n        \n    case 40: //Verlangsamungsfeld\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 50;\n        }\n        break;\n    case 50: //Zweites Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 60;\n        }\n        break; \n        \n        \n    case 60: //Zweiter Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Ziel erreicht\n        if (farbe == \"schwarz\") {\n            runden += 1;\n            position = 10;\n        }\n        break;        \n    \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Die aktuelle Roboterposition ist ungültig. Die Position heisst:\" + position);\n    break;\n}\n\n//NACHHER LÖSCHEN (nur zum debuggen)\n//darfHierFahren = true;\n\n//Daten speichern\ncontext.set(\"farbe\", farbe);\ncontext.set(\"position\", position);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"runden\", runden);\n\nmsg.topic = \"darfHierFahren\";\nmsg.payload = [darfHierFahren, position, runden];\n\n\n//Signal schicken, dass Roboter alle Runden beendet hat\nif (runden >= 3) {\n    var msg2 = {\n        topic: \"fertig\",\n        payload: robotNr\n    }\n    return [msg, msg2];\n    \n} else { //Nur Message schicken\n\n    return msg;\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1240,
        "wires": [
            [
                "7732c578a9d6eea5",
                "8762126793035488",
                "d90c54a2ef1de69a"
            ],
            [
                "7732c578a9d6eea5",
                "2cd18ef0f8797cdb"
            ]
        ]
    },
    {
        "id": "523cca80ce07b6f6",
        "type": "link in",
        "z": "af12c5d524d1fd46",
        "name": "Spielstatus",
        "links": [
            "bfc31b720c3638f6"
        ],
        "x": 1020,
        "y": 1240,
        "wires": [
            [
                "2e37486f8014f8a5",
                "213d4e87effe3330",
                "d90c54a2ef1de69a",
                "723e27c6d0fa0341"
            ]
        ],
        "l": true
    },
    {
        "id": "7732c578a9d6eea5",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1340,
        "wires": []
    },
    {
        "id": "213d4e87effe3330",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1120,
        "wires": []
    },
    {
        "id": "1b84b2cd205c6963",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "gruen",
        "payloadType": "str",
        "x": 990,
        "y": 1300,
        "wires": [
            [
                "2e37486f8014f8a5"
            ]
        ]
    },
    {
        "id": "0ec001205d0d2b35",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "dunkelgruen",
        "payloadType": "str",
        "x": 1010,
        "y": 1340,
        "wires": [
            [
                "2e37486f8014f8a5"
            ]
        ]
    },
    {
        "id": "2cd18ef0f8797cdb",
        "type": "link out",
        "z": "af12c5d524d1fd46",
        "name": "Roboter hat Rennen beendet",
        "mode": "link",
        "links": [
            "15227b16ba1dd957"
        ],
        "x": 1800,
        "y": 1240,
        "wires": [],
        "l": true
    },
    {
        "id": "9de808be68a22c69",
        "type": "delay",
        "z": "af12c5d524d1fd46",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2280,
        "y": 800,
        "wires": [
            [
                "c56eb92f95611d9a"
            ]
        ]
    },
    {
        "id": "953cc207c971526c",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "Roboternummer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "1d8e1f99a14ef2b3"
            ]
        ]
    },
    {
        "id": "b5a5ce5c98eb0ddb",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Geschwindigkeit senden",
        "func": "\n//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n//Vorherige Daten werden abgerufen\nvar data = context.get('data')|| [127,127,robotNr];\n\n\nif(msg.topic == \"speedBothMotors\"){\n    data = msg.payload;\n    msg.topic = \"speedBothMotors\";\n\n}\n\ncontext.set(\"data\", data);\n\n\nif (msg.topic == \"CLK\") {\n    msg.payload = \"\";\n    msg.payload = data[0] + \",\" + data[1] + \",\" + data [2];\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 640,
        "wires": [
            [
                "d37f5d2f1aad4045",
                "e6269bca8e00d2d2"
            ]
        ]
    },
    {
        "id": "d37f5d2f1aad4045",
        "type": "serial out",
        "z": "af12c5d524d1fd46",
        "name": "",
        "serial": "e341ce52d8147dfa",
        "x": 2830,
        "y": 640,
        "wires": []
    },
    {
        "id": "02d9c9a717920c5e",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 1990,
        "y": 800,
        "wires": [
            [
                "b5a5ce5c98eb0ddb"
            ]
        ]
    },
    {
        "id": "e6269bca8e00d2d2",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 800,
        "wires": []
    },
    {
        "id": "389263d30f6d0b08",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "FarbbereichserkennungORIGINAL",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3510, 3010, 2610, 2220, 1800, 1430, 1180, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"dunkel1gruen\", \"dunkel1blau\", \"dunkel1rot\", \"dunkel2rot\", \"dunkel2blau\", \"dunkel3blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "24f1def581f2af05",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "blau",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"blau\",\"blau\"]",
        "payloadType": "json",
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "7b37e5adce89e41c"
            ]
        ]
    },
    {
        "id": "7dd1c907bfe408b7",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "weiss",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"weiss\",\"weiss\"]",
        "payloadType": "json",
        "x": 710,
        "y": 1220,
        "wires": [
            [
                "7b37e5adce89e41c"
            ]
        ]
    },
    {
        "id": "cb7393da7d0a7d3e",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "rot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"rot\",\"rot\"]",
        "payloadType": "json",
        "x": 710,
        "y": 1300,
        "wires": [
            [
                "7b37e5adce89e41c"
            ]
        ]
    },
    {
        "id": "b306e08e975803bd",
        "type": "inject",
        "z": "af12c5d524d1fd46",
        "name": "schwarz",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"schwarz\",\"schwarz\"]",
        "payloadType": "json",
        "x": 720,
        "y": 1340,
        "wires": [
            [
                "7b37e5adce89e41c"
            ]
        ]
    },
    {
        "id": "ddc1398551d73531",
        "type": "ui_button",
        "z": "af12c5d524d1fd46",
        "name": "",
        "group": "23ebc1f0dcbb825b",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop Roboter",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "Speed",
        "topicType": "str",
        "x": 470,
        "y": 480,
        "wires": [
            [
                "c8ad844ad7fca1d0"
            ]
        ]
    },
    {
        "id": "926c0db952f9796e",
        "type": "ui_text",
        "z": "af12c5d524d1fd46",
        "group": "23ebc1f0dcbb825b",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Runde: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1940,
        "y": 1160,
        "wires": []
    },
    {
        "id": "8762126793035488",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Runde rauslesen",
        "func": "var runde = msg.payload[2];\nmsg.payload = runde + \"/3\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1160,
        "wires": [
            [
                "926c0db952f9796e"
            ]
        ]
    },
    {
        "id": "37a1c04e7ce1faca",
        "type": "ui_text",
        "z": "af12c5d524d1fd46",
        "group": "23ebc1f0dcbb825b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Lenkung",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 140,
        "y": 460,
        "wires": []
    },
    {
        "id": "e07d0a96c71dbde3",
        "type": "ui_text",
        "z": "af12c5d524d1fd46",
        "group": "23ebc1f0dcbb825b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Geschwindigkeit",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 160,
        "y": 580,
        "wires": []
    },
    {
        "id": "d90c54a2ef1de69a",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Neue State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar farbe = context.get(\"farbe\") || \"schwarz\";\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else {\n        spielLauft = false;\n    }\n    //Freie Fahrt um in das Startfeld zu fahren\n    if (msg.payload == \"Vorbereiten\"){\n        Zustand = \"Freie Fahrt\";\n    }\n    //Beim Countdown muss der Roboter stehen bleiben\n    if (msg.payload == \"Der Countdown lauft\") {\n        Zustand = \"Nicht Aktiv\";\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n    \n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Freie Fahrt\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n      \n    case \"Boost\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }        \n        break;\n        \n    case \"Langsamer\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }      \n        break;\n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"farbe\", farbe);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1580,
        "wires": [
            [
                "5dc30cf6fdf7a97f",
                "cdf28f9d8c1dacea",
                "9190adda61dfc916"
            ]
        ]
    },
    {
        "id": "723e27c6d0fa0341",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Roboter Stoppen",
        "func": "\n//Damit ein Roboter nicht von selber anfährt, wenn das Spiel neugestartet wird, wird hier die Geschwindigkeit auf 0 gesetzt\nif (msg.payload == \"Spiel lauft nicht\") {\n    msg.topic = \"Speed\";\n    msg.payload = 0;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 640,
        "wires": [
            [
                "c8ad844ad7fca1d0"
            ]
        ]
    },
    {
        "id": "0b3dd75a5bd89273",
        "type": "trigger",
        "z": "af12c5d524d1fd46",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "200",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 710,
        "y": 400,
        "wires": [
            [
                "d182d8cd9c9a5ebb"
            ]
        ]
    },
    {
        "id": "d182d8cd9c9a5ebb",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Bei Inaktivität Speed auf 0 setzen",
        "func": "msg.topic = \"Speed\";\nmsg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 400,
        "wires": [
            [
                "c8ad844ad7fca1d0"
            ]
        ]
    },
    {
        "id": "fdd604cc7b6c2f60",
        "type": "trigger",
        "z": "af12c5d524d1fd46",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "15",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2170,
        "y": 1580,
        "wires": [
            [
                "6eb8e6393a316dd4"
            ]
        ]
    },
    {
        "id": "6eb8e6393a316dd4",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Spiel abbrechen, weil Roboter feststeckt",
        "func": "msg.topic = \"stop\";\nmsg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1720,
        "wires": [
            [
                "a67df578389cc920",
                "796ad5a87cec17c0"
            ]
        ]
    },
    {
        "id": "9190adda61dfc916",
        "type": "function",
        "z": "af12c5d524d1fd46",
        "name": "Filter für Abseits der Strecke",
        "func": "if (msg.payload != \"Abseits der Strecke\") {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 1580,
        "wires": [
            [
                "fdd604cc7b6c2f60"
            ]
        ]
    },
    {
        "id": "a67df578389cc920",
        "type": "debug",
        "z": "af12c5d524d1fd46",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "796ad5a87cec17c0",
        "type": "link out",
        "z": "af12c5d524d1fd46",
        "name": "Spiel beenden, Roboter inaktiv",
        "mode": "link",
        "links": [
            "5f8f076a44e437a6"
        ],
        "x": 2410,
        "y": 1720,
        "wires": [],
        "l": true
    },
    {
        "id": "b7262a16662755cc",
        "type": "ui_slider",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "label": "",
        "tooltip": "Den Roboter lenken",
        "group": "337e474ff762dded",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "LeftRight",
        "topicType": "str",
        "min": "-60",
        "max": "60",
        "step": "1",
        "className": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "8798240c71978ca2"
            ]
        ]
    },
    {
        "id": "7b2819a0a0fdb803",
        "type": "ui_slider",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "label": "",
        "tooltip": "Geschwindigkeit regeln",
        "group": "337e474ff762dded",
        "order": 4,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "Speed",
        "topicType": "str",
        "min": "-127",
        "max": "127",
        "step": "1",
        "className": "",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "8798240c71978ca2"
            ]
        ]
    },
    {
        "id": "c42c582775bfd3ca",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Roboter-Befehle Umrechnen",
        "func": "//Vorherige Daten werden abgerufen\nvar LeftRight = context.get('LeftRight')||0; //Initialwert 0, wenn es Variable noch nicht gibttt\nvar Speed = context.get('Speed')||0;\n\n//Variablen definieren\nvar speedLeft = 0;\nvar speedRight = 0;\nvar zuViel = 0;\n\n//Die Daten werden ins Programm übernommen\nif(msg.topic === \"LeftRight\"){\n    LeftRight = msg.payload;\n}\n\nif(msg.topic === \"Speed\"){\n    Speed = msg.payload;\n}\n\n//Eingabedaten werden zwischengespeichert\ncontext.set('LeftRight',LeftRight);\ncontext.set('Speed',Speed);\n\n\n\n//Speed wird gedrosselt\nSpeed = Speed;\n\n\n//Die Geschwindigkeiten der beiden Motoren werden anhand der Eingaben berechnet\nif (LeftRight < 0) {\n    //Roboter lenkt nach links\n    speedRight = Speed;\n    speedLeft = (LeftRight * 2 + 127) * Speed / 127;\n    \n} else if (LeftRight > 0) {\n    //Roboter lenkt nach rechts\n    speedLeft = Speed;\n    speedRight = (-LeftRight * 2 + 127) * Speed / 127;\n    \n    //Roboter fährt geradeaus\n} else {\n    speedLeft = Speed;\n    speedRight = Speed;\n}\n\n\n\n\n\n\n\n\n//Wenn der \"speed\"-Slider nahe bei 0 ist, werden beide Motoren auf 0 gestellt\nif (Speed <= 10 && Speed >= -10) {\n    speedLeft = 0;\n    speedRight = 0;\n}\n\n\n//Die Geschwindigkeit wird von -127 bis 127 zu 0 bis 255 umskaliert\n//speedLeft = speedLeft + 127;\n//speedRight = speedRight + 127;\n\n//Daten ausgeben\nmsg.topic = \"speedBothMotors\"\nmsg.payload = [speedLeft, speedRight];\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 540,
        "wires": [
            [
                "0d2ced6a9b50d520",
                "e5974113f9d13a28"
            ]
        ]
    },
    {
        "id": "8798240c71978ca2",
        "type": "delay",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 540,
        "wires": [
            [
                "c42c582775bfd3ca",
                "31d217b8974ced26"
            ]
        ]
    },
    {
        "id": "2440a5f2ebba9867",
        "type": "link out",
        "z": "1c7c9fdf7f99de7a",
        "name": "Steuerdaten",
        "mode": "link",
        "links": [
            "0cf45c5f6f3262b2"
        ],
        "x": 2710,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "9b76144811102944",
        "type": "link in",
        "z": "1c7c9fdf7f99de7a",
        "name": "Sensordaten",
        "links": [
            "73901a071c6bdb9d"
        ],
        "x": 150,
        "y": 960,
        "wires": [
            [
                "d77d2f91c5d078f2"
            ]
        ],
        "l": true
    },
    {
        "id": "d77d2f91c5d078f2",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Sensordaten filtern",
        "func": "var roboterNr = flow.get(\"robotNr\") || 1;\n\n\n//Farben definieren\nvar sensordatenArray = msg.payload.split(\",\");\n//code wird nur ausgeführt, wenn es an diesen Roboter adressiert ist\nif(sensordatenArray[0] === \"R\" + roboterNr.toString()){\n    var L1 = sensordatenArray[1];\n    var R1 = sensordatenArray[2];\n    msg.topic = \"sensorDaten\";\n    \n    //Daten ausgeben\n    msg.payload = [L1, R1];\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 960,
        "wires": [
            [
                "beabcaeaae66b3da",
                "7114dd411bbedb4f"
            ]
        ]
    },
    {
        "id": "a77a57c6697e273c",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Roboter-Nummer anfügen",
        "func": "//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n//Bei Programmbeginn Roboternummer festlegen\nif(msg.topic == \"robotNr\"){\n    robotNr = msg.payload;\n}\n\n\nif(msg.topic == \"speedBothMotors\"){\n    msg.topic = \"speedBothMotors\";\n    msg.payload[2] = robotNr;\n    return msg;\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 540,
        "wires": [
            [
                "95ae48e2bc446aa5",
                "2440a5f2ebba9867",
                "2c8209b4183ad296"
            ]
        ]
    },
    {
        "id": "beabcaeaae66b3da",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Farbbereichserkennung Roboter1",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3600, 2100, 1000, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"rot\", \"blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 960,
        "wires": [
            [
                "ed6203a7b02fb7ab"
            ]
        ]
    },
    {
        "id": "ed6203a7b02fb7ab",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Farbe festlegen",
        "func": "//Vorherige Daten abrufen\nvar festgelegteFarbe = context.get(\"festgelegteFarbe\")||\"undefiniert\"; //die Farbe, welche als Output ausgegeben wird\nvar zaehlerFarbe = context.get(\"zaehlerFarbe\")||\"undefiniert\"; //Die Farbe die zuletzt erkannt wurde, und gezählt wird\nvar zaehler = context.get(\"zaehler\")||0; //Zählt wie oft schon die gleiche Farbe erkannt wurde\nvar hatGeaendert = false;\n\n//vorgabeZaehler gibt an, wie oft die gleiche Farbe erkennt werden muss, bis die neue Farbe festgelegt wird\nvar vorgabeZaehler = 2;\n\nif (msg.topic == \"farben\") {\n    //Die Farbe des Sensors L1 wird hier verwendet \n    var neueFarbe = msg.payload[1];\n    //Wenn die Farbe ungleich der festgelegten Farbe ist\n    if (neueFarbe != festgelegteFarbe) {\n        //Wenn zuletzt eine andere Farbe gemessen wurde wird der Zähler zurückgesetzt\n        if (neueFarbe != zaehlerFarbe) {\n            zaehlerFarbe = neueFarbe;\n            zaehler = 0;\n        }\n    \n        zaehler += 1;\n        //Wenn der Zähler die Vorgabe ereicht hat wird die neue Farbe festgelegt\n        if (zaehler == vorgabeZaehler) {\n            festgelegteFarbe = neueFarbe;\n            hatGeaendert = true;\n        }\n    }\n    //Daten speichern\n    context.set(\"festgelegteFarbe\", festgelegteFarbe);\n    context.set(\"zaehlerFarbe\", zaehlerFarbe);\n    context.set(\"zaehler\", zaehler);\n} \n\n\n\n//Farbe ausgeben bei jedem Zyklussignal\nif (hatGeaendert == true) {\n    msg.topic = \"Farbe\";\n    msg.payload = festgelegteFarbe;\n    return msg;\n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 960,
        "wires": [
            [
                "af9ddba154f6ab6b",
                "bd6e9f2187073704",
                "9c8bfb516e0463db"
            ]
        ]
    },
    {
        "id": "9caa96f146ccf1de",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 1130,
        "y": 1580,
        "wires": [
            [
                "9c8bfb516e0463db"
            ]
        ]
    },
    {
        "id": "65f4c8818036a15d",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar itemAktiv = context.get(\"itemAktiv\") || false;\nvar anzahlRoboter = context.get(\"anzahlRoboter\") || 1;\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Variablen definieren\n\nvar roboterAktiv;\n\n\n\n\n\n\n\n//Anzahl Roboter aktualisieren\nif (msg.topic == \"robotCount\") {\n    anzahlRoboter = msg.payload;\n}\n\n\n//itemAktiv aktualisieren\nif (msg.topic == \"itemAufRoboter\") {\n    itemAktiv = msg.payload;\n}\n\n//node.warn(roboterNummer.toString() + anzahlRoboter);\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else if (msg.payload == \"Vorbereiten\"){\n        spielLauft = false;\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n}\n\n//Definieren ob der Roboter aktiv ist oder nicht\n//Er ist aktiv wenn die Anzahl Roboter nicht kleiner ist als seine Nummer und wenn das Spiel läuft\nif ((roboterNummer <= anzahlRoboter) && (spielLauft == true)) {\n    roboterAktiv = true;\n} else {\n    roboterAktiv = false;\n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n        //Item wirkt auf diesen Roboter\n        else if (itemAktiv == true) {\n            Zustand = \"Beeinflusst von Item\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Beeinflusst von Item\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        //Item ist nicht mehr aktiv\n        else if (itemAktiv == false) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n      \n      \n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (roboterAktiv == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Item wirkt auf diesen Roboter\n            else if (itemAktiv == true) {\n                Zustand = \"Beeinflusst von Item\";\n            }\n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"itemAktiv\", itemAktiv);\ncontext.set(\"anzahlRoboter\", anzahlRoboter);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "fa753abac8c1fab9",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1520,
        "wires": []
    },
    {
        "id": "0dfe83b82f1f9aa7",
        "type": "link in",
        "z": "1c7c9fdf7f99de7a",
        "name": "RobotCount",
        "links": [
            "405564b062d28697"
        ],
        "x": 1130,
        "y": 1480,
        "wires": [
            [
                "9c8bfb516e0463db"
            ]
        ],
        "l": true
    },
    {
        "id": "0d2ced6a9b50d520",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Geschwindigkeit mit Status ändern",
        "func": "//initialisierungsobjekt speed definieren\nlet speed = {\n  links: 127,  \n  rechts: 127\n}\n\n\n\n\n\n\n\n//Eingabe abrufen\nvar speedEingabe = context.get(\"speedEingabe\") || speed;\n\n\n\nif (msg.topic == \"Zustand\") {\n    //Zustand definieren\n    var Zustand = msg.payload;\n    \n    //Variablen definieren\n    let speedAusgabe = {\n        links: speedEingabe.links,\n        rechts: speedEingabe.rechts\n    }\n    \n    if (Zustand == \"Normal Fahren\") {\n        speedAusgabe.links = speedEingabe.links / 3;\n        speedAusgabe.rechts = speedEingabe.rechts / 3;\n    }\n\n\n    if (Zustand == \"Boost\") {\n        speedAusgabe.links = speedEingabe.links;\n        speedAusgabe.rechts = speedEingabe.rechts;\n    }\n    \n    if (Zustand == \"Langsamer\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    if (Zustand == \"Freie Fahrt\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    //Roboter fährt rückwärts, wenn er im Abseits ist\n    if (Zustand == \"Abseits der Strecke\") {\n        speedAusgabe.links = -22;\n        speedAusgabe.rechts = -22;\n    }\n\n    //Roboter anhalten, wenn er nicht aktiv ist\n    if (Zustand == \"Nicht Aktiv\") {\n        speedAusgabe.links = 0;\n        speedAusgabe.rechts = 0;\n    }\n    \n    //Geschwindigkeit runden\n    speedAusgabe.links = Math.floor(speedAusgabe.links);\n    speedAusgabe.rechts = Math.floor(speedAusgabe.rechts);\n    \n\n    //Geschwindigkeit ausgeben und umskalieren\n    msg.topic = \"speedBothMotors\"\n    msg.payload = [speedAusgabe.links + 127, speedAusgabe.rechts + 127];\n    return msg;\n    \n\n} else if (msg.topic == \"speedBothMotors\") {\n    //Geschwindigkeit aktualisieren und runden\n    speedEingabe.links = Math.floor(msg.payload[0]);\n    speedEingabe.rechts = Math.floor(msg.payload[1]);\n    context.set(\"speedEingabe\", speedEingabe);\n    \n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 540,
        "wires": [
            [
                "a77a57c6697e273c",
                "f46f9846f3f9752b"
            ]
        ]
    },
    {
        "id": "f46f9846f3f9752b",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 660,
        "wires": []
    },
    {
        "id": "780e152c2093a243",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 780,
        "wires": []
    },
    {
        "id": "e5974113f9d13a28",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 600,
        "wires": []
    },
    {
        "id": "af9ddba154f6ab6b",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 900,
        "wires": []
    },
    {
        "id": "7114dd411bbedb4f",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 900,
        "wires": []
    },
    {
        "id": "5a6708e48a007f8b",
        "type": "change",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "robotNr",
                "pt": "flow",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "bd6e9f2187073704",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Position festlegen",
        "func": "//Daten abrufen\nvar farbe = context.get(\"farbe\") || \"schwarz\";\nvar position = context.get(\"position\") || 10;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar runden = context.get(\"runden\") || 0;\n\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n\n//Wenn Spiel nicht mehr läuft, wird alles initialisiert\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft nicht\" || msg.payload == \"Der Countdown lauft\") {\n        position = 10;\n        runden = 0;        \n    }\n\n}\n\n\n\n\n//State Machine\nswitch(position) {\n\n        \n    case 10: //Start\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 20;\n        }\n        break;\n    case 20: //Erstes Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 30;\n        }\n        break; \n        \n        \n    case 30: //Erster Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"schwarz\") {\n            position = 40;\n        }\n        break; \n        \n        \n    case 40: //Verlangsamungsfeld\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 50;\n        }\n        break;\n    case 50: //Zweites Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 60;\n        }\n        break; \n        \n        \n    case 60: //Zweiter Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Ziel erreicht\n        if (farbe == \"schwarz\") {\n            runden += 1;\n            position = 10;\n        }\n        break;        \n    \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Die aktuelle Roboterposition ist ungültig. Die Position heisst:\" + position);\n    break;\n}\n\n//NACHHER LÖSCHEN (nur zum debuggen)\n//darfHierFahren = true;\n\n//Daten speichern\ncontext.set(\"farbe\", farbe);\ncontext.set(\"position\", position);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"runden\", runden);\n\nmsg.topic = \"darfHierFahren\";\nmsg.payload = [darfHierFahren, position, runden];\n\n\n//Signal schicken, dass Roboter alle Runden beendet hat\nif (runden >= 3) {\n    var msg2 = {\n        topic: \"fertig\",\n        payload: robotNr\n    }\n    return [msg, msg2];\n    \n} else { //Nur Message schicken\n\n    return msg;\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1220,
        "wires": [
            [
                "c75e17cf100c3432",
                "4d35b2c806904abb",
                "9c8bfb516e0463db"
            ],
            [
                "c75e17cf100c3432",
                "c828b604d822fbdf"
            ]
        ]
    },
    {
        "id": "96a7d64498f0814e",
        "type": "link in",
        "z": "1c7c9fdf7f99de7a",
        "name": "Spielstatus",
        "links": [
            "bfc31b720c3638f6"
        ],
        "x": 1020,
        "y": 1220,
        "wires": [
            [
                "bd6e9f2187073704",
                "f990a8e3c9560f1d",
                "9c8bfb516e0463db",
                "e2f698059904e4ce"
            ]
        ],
        "l": true
    },
    {
        "id": "c75e17cf100c3432",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f990a8e3c9560f1d",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f235cefbb080d961",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "gruen",
        "payloadType": "str",
        "x": 990,
        "y": 1280,
        "wires": [
            [
                "bd6e9f2187073704"
            ]
        ]
    },
    {
        "id": "603c7986b0fc7734",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "dunkelgruen",
        "payloadType": "str",
        "x": 1010,
        "y": 1320,
        "wires": [
            [
                "bd6e9f2187073704"
            ]
        ]
    },
    {
        "id": "c828b604d822fbdf",
        "type": "link out",
        "z": "1c7c9fdf7f99de7a",
        "name": "Roboter hat Rennen beendet",
        "mode": "link",
        "links": [
            "15227b16ba1dd957"
        ],
        "x": 1800,
        "y": 1220,
        "wires": [],
        "l": true
    },
    {
        "id": "95ae48e2bc446aa5",
        "type": "delay",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2280,
        "y": 780,
        "wires": [
            [
                "780e152c2093a243"
            ]
        ]
    },
    {
        "id": "096b4f7ee95140d8",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "Roboternummer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "5a6708e48a007f8b"
            ]
        ]
    },
    {
        "id": "2c8209b4183ad296",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Geschwindigkeit senden",
        "func": "\n//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n//Vorherige Daten werden abgerufen\nvar data = context.get('data')|| [127,127,robotNr];\n\n\nif(msg.topic == \"speedBothMotors\"){\n    data = msg.payload;\n    msg.topic = \"speedBothMotors\";\n\n}\n\ncontext.set(\"data\", data);\n\n\nif (msg.topic == \"CLK\") {\n    msg.payload = \"\";\n    msg.payload = data[0] + \",\" + data[1] + \",\" + data [2];\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 620,
        "wires": [
            [
                "2169dd71ca45dd85",
                "0c91a559fe6e807d"
            ]
        ]
    },
    {
        "id": "2169dd71ca45dd85",
        "type": "serial out",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "serial": "e341ce52d8147dfa",
        "x": 2830,
        "y": 620,
        "wires": []
    },
    {
        "id": "21b9afd2ba6322d1",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 1990,
        "y": 780,
        "wires": [
            [
                "2c8209b4183ad296"
            ]
        ]
    },
    {
        "id": "0c91a559fe6e807d",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 780,
        "wires": []
    },
    {
        "id": "89d855178d43b3e9",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "FarbbereichserkennungORIGINAL",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3510, 3010, 2610, 2220, 1800, 1430, 1180, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"dunkel1gruen\", \"dunkel1blau\", \"dunkel1rot\", \"dunkel2rot\", \"dunkel2blau\", \"dunkel3blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "042a3390fad4170c",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "blau",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"blau\",\"blau\"]",
        "payloadType": "json",
        "x": 710,
        "y": 1240,
        "wires": [
            [
                "ed6203a7b02fb7ab"
            ]
        ]
    },
    {
        "id": "24b39e20c6d02db4",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "weiss",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"weiss\",\"weiss\"]",
        "payloadType": "json",
        "x": 710,
        "y": 1200,
        "wires": [
            [
                "ed6203a7b02fb7ab"
            ]
        ]
    },
    {
        "id": "54b1bc5c74972888",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "rot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"rot\",\"rot\"]",
        "payloadType": "json",
        "x": 710,
        "y": 1280,
        "wires": [
            [
                "ed6203a7b02fb7ab"
            ]
        ]
    },
    {
        "id": "036a3fb954e8a750",
        "type": "inject",
        "z": "1c7c9fdf7f99de7a",
        "name": "schwarz",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"schwarz\",\"schwarz\"]",
        "payloadType": "json",
        "x": 720,
        "y": 1320,
        "wires": [
            [
                "ed6203a7b02fb7ab"
            ]
        ]
    },
    {
        "id": "0210200bf15ca614",
        "type": "ui_button",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "group": "337e474ff762dded",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop Roboter",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "Speed",
        "topicType": "str",
        "x": 470,
        "y": 460,
        "wires": [
            [
                "c42c582775bfd3ca"
            ]
        ]
    },
    {
        "id": "1ae4ca12b174b46c",
        "type": "ui_text",
        "z": "1c7c9fdf7f99de7a",
        "group": "337e474ff762dded",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Runde: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1940,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4d35b2c806904abb",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Runde rauslesen",
        "func": "var runde = msg.payload[2];\nmsg.payload = runde + \"/3\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1140,
        "wires": [
            [
                "1ae4ca12b174b46c"
            ]
        ]
    },
    {
        "id": "6de520c8393e89ee",
        "type": "ui_text",
        "z": "1c7c9fdf7f99de7a",
        "group": "337e474ff762dded",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Geschwindigkeit",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 160,
        "y": 560,
        "wires": []
    },
    {
        "id": "9c8bfb516e0463db",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Neue State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar farbe = context.get(\"farbe\") || \"schwarz\";\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else {\n        spielLauft = false;\n    }\n    //Freie Fahrt um in das Startfeld zu fahren\n    if (msg.payload == \"Vorbereiten\"){\n        Zustand = \"Freie Fahrt\";\n    }\n    //Beim Countdown muss der Roboter stehen bleiben\n    if (msg.payload == \"Der Countdown lauft\") {\n        Zustand = \"Nicht Aktiv\";\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n    \n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Freie Fahrt\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n      \n    case \"Boost\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }        \n        break;\n        \n    case \"Langsamer\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }      \n        break;\n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"farbe\", farbe);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1560,
        "wires": [
            [
                "fa753abac8c1fab9",
                "0d2ced6a9b50d520",
                "61d0f925a4415e1f"
            ]
        ]
    },
    {
        "id": "e2f698059904e4ce",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Roboter Stoppen",
        "func": "\n//Damit ein Roboter nicht von selber anfährt, wenn das Spiel neugestartet wird, wird hier die Geschwindigkeit auf 0 gesetzt\nif (msg.payload == \"Spiel lauft nicht\") {\n    msg.topic = \"Speed\";\n    msg.payload = 0;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 620,
        "wires": [
            [
                "c42c582775bfd3ca"
            ]
        ]
    },
    {
        "id": "31d217b8974ced26",
        "type": "trigger",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "200",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 710,
        "y": 380,
        "wires": [
            [
                "f32c90d6e6d16f22"
            ]
        ]
    },
    {
        "id": "f32c90d6e6d16f22",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Bei Inaktivität Speed auf 0 setzen",
        "func": "msg.topic = \"Speed\";\nmsg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "c42c582775bfd3ca"
            ]
        ]
    },
    {
        "id": "58e9f83678e7ead2",
        "type": "trigger",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "15",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2170,
        "y": 1560,
        "wires": [
            [
                "ae172189bb90da81"
            ]
        ]
    },
    {
        "id": "ae172189bb90da81",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Spiel abbrechen, weil Roboter feststeckt",
        "func": "msg.topic = \"stop\";\nmsg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1700,
        "wires": [
            [
                "63dec7756ba01710",
                "e7cbe10bba61f295"
            ]
        ]
    },
    {
        "id": "61d0f925a4415e1f",
        "type": "function",
        "z": "1c7c9fdf7f99de7a",
        "name": "Filter für Abseits der Strecke",
        "func": "if (msg.payload != \"Abseits der Strecke\") {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 1560,
        "wires": [
            [
                "58e9f83678e7ead2"
            ]
        ]
    },
    {
        "id": "63dec7756ba01710",
        "type": "debug",
        "z": "1c7c9fdf7f99de7a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 1920,
        "wires": []
    },
    {
        "id": "e7cbe10bba61f295",
        "type": "link out",
        "z": "1c7c9fdf7f99de7a",
        "name": "Spiel beenden, Roboter inaktiv",
        "mode": "link",
        "links": [
            "5f8f076a44e437a6"
        ],
        "x": 2410,
        "y": 1700,
        "wires": [],
        "l": true
    },
    {
        "id": "7518bf06a8abf9d4",
        "type": "ui_text",
        "z": "1c7c9fdf7f99de7a",
        "group": "337e474ff762dded",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Lenkung",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 140,
        "y": 440,
        "wires": []
    },
    {
        "id": "4e6aeec20c7cfe39",
        "type": "ui_slider",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "label": "",
        "tooltip": "Den Roboter lenken",
        "group": "5e8a52f455b56a75",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "LeftRight",
        "topicType": "str",
        "min": "-60",
        "max": "60",
        "step": "1",
        "className": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "0a355f674359a414"
            ]
        ]
    },
    {
        "id": "70eabcc351ea140e",
        "type": "ui_slider",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "label": "",
        "tooltip": "Geschwindigkeit regeln",
        "group": "5e8a52f455b56a75",
        "order": 4,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "Speed",
        "topicType": "str",
        "min": "-127",
        "max": "127",
        "step": "1",
        "className": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "0a355f674359a414"
            ]
        ]
    },
    {
        "id": "2fd5f5fe1f4b15e0",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Roboter-Befehle Umrechnen",
        "func": "//Vorherige Daten werden abgerufen\nvar LeftRight = context.get('LeftRight')||0; //Initialwert 0, wenn es Variable noch nicht gibttt\nvar Speed = context.get('Speed')||0;\n\n//Variablen definieren\nvar speedLeft = 0;\nvar speedRight = 0;\nvar zuViel = 0;\n\n//Die Daten werden ins Programm übernommen\nif(msg.topic === \"LeftRight\"){\n    LeftRight = msg.payload;\n}\n\nif(msg.topic === \"Speed\"){\n    Speed = msg.payload;\n}\n\n//Eingabedaten werden zwischengespeichert\ncontext.set('LeftRight',LeftRight);\ncontext.set('Speed',Speed);\n\n\n\n//Speed wird gedrosselt\nSpeed = Speed;\n\n\n//Die Geschwindigkeiten der beiden Motoren werden anhand der Eingaben berechnet\nif (LeftRight < 0) {\n    //Roboter lenkt nach links\n    speedRight = Speed;\n    speedLeft = (LeftRight * 2 + 127) * Speed / 127;\n    \n} else if (LeftRight > 0) {\n    //Roboter lenkt nach rechts\n    speedLeft = Speed;\n    speedRight = (-LeftRight * 2 + 127) * Speed / 127;\n    \n    //Roboter fährt geradeaus\n} else {\n    speedLeft = Speed;\n    speedRight = Speed;\n}\n\n\n\n\n\n\n\n\n//Wenn der \"speed\"-Slider nahe bei 0 ist, werden beide Motoren auf 0 gestellt\nif (Speed <= 10 && Speed >= -10) {\n    speedLeft = 0;\n    speedRight = 0;\n}\n\n\n//Die Geschwindigkeit wird von -127 bis 127 zu 0 bis 255 umskaliert\n//speedLeft = speedLeft + 127;\n//speedRight = speedRight + 127;\n\n//Daten ausgeben\nmsg.topic = \"speedBothMotors\"\nmsg.payload = [speedLeft, speedRight];\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 560,
        "wires": [
            [
                "83312faa5ce43b75",
                "ae91e6b2187b01d3"
            ]
        ]
    },
    {
        "id": "0a355f674359a414",
        "type": "delay",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 560,
        "wires": [
            [
                "2fd5f5fe1f4b15e0",
                "41a19b6bb4291bc7"
            ]
        ]
    },
    {
        "id": "ca555ff73b99e45c",
        "type": "link out",
        "z": "7aa9951234ca3c4a",
        "name": "Steuerdaten",
        "mode": "link",
        "links": [
            "0cf45c5f6f3262b2"
        ],
        "x": 2730,
        "y": 560,
        "wires": [],
        "l": true
    },
    {
        "id": "25e4ef47329bdfcf",
        "type": "link in",
        "z": "7aa9951234ca3c4a",
        "name": "Sensordaten",
        "links": [
            "73901a071c6bdb9d"
        ],
        "x": 170,
        "y": 980,
        "wires": [
            [
                "9cbf2b4d9f7fb576"
            ]
        ],
        "l": true
    },
    {
        "id": "9cbf2b4d9f7fb576",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Sensordaten filtern",
        "func": "var roboterNr = flow.get(\"robotNr\") || 1;\n\n\n//Farben definieren\nvar sensordatenArray = msg.payload.split(\",\");\n//code wird nur ausgeführt, wenn es an diesen Roboter adressiert ist\nif(sensordatenArray[0] === \"R\" + roboterNr.toString()){\n    var L1 = sensordatenArray[1];\n    var R1 = sensordatenArray[2];\n    msg.topic = \"sensorDaten\";\n    \n    //Daten ausgeben\n    msg.payload = [L1, R1];\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 980,
        "wires": [
            [
                "01a2d24be45bf43c",
                "2dd4710b541e7c36"
            ]
        ]
    },
    {
        "id": "3b0c4d24c21d5421",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Roboter-Nummer anfügen",
        "func": "//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n//Bei Programmbeginn Roboternummer festlegen\nif(msg.topic == \"robotNr\"){\n    robotNr = msg.payload;\n}\n\n\nif(msg.topic == \"speedBothMotors\"){\n    msg.topic = \"speedBothMotors\";\n    msg.payload[2] = robotNr;\n    return msg;\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 560,
        "wires": [
            [
                "22735c6314329934",
                "ca555ff73b99e45c",
                "e59e2115e1c11268"
            ]
        ]
    },
    {
        "id": "01a2d24be45bf43c",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Farbbereichserkennung Roboter1",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3600, 2100, 1500, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"rot\", \"blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 980,
        "wires": [
            [
                "5305bda810dea05d"
            ]
        ]
    },
    {
        "id": "5305bda810dea05d",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Farbe festlegen",
        "func": "//Vorherige Daten abrufen\nvar festgelegteFarbe = context.get(\"festgelegteFarbe\")||\"undefiniert\"; //die Farbe, welche als Output ausgegeben wird\nvar zaehlerFarbe = context.get(\"zaehlerFarbe\")||\"undefiniert\"; //Die Farbe die zuletzt erkannt wurde, und gezählt wird\nvar zaehler = context.get(\"zaehler\")||0; //Zählt wie oft schon die gleiche Farbe erkannt wurde\nvar hatGeaendert = false;\n\n//vorgabeZaehler gibt an, wie oft die gleiche Farbe erkennt werden muss, bis die neue Farbe festgelegt wird\nvar vorgabeZaehler = 2;\n\nif (msg.topic == \"farben\") {\n    //Die Farbe des Sensors L1 wird hier verwendet \n    var neueFarbe = msg.payload[1];\n    //Wenn die Farbe ungleich der festgelegten Farbe ist\n    if (neueFarbe != festgelegteFarbe) {\n        //Wenn zuletzt eine andere Farbe gemessen wurde wird der Zähler zurückgesetzt\n        if (neueFarbe != zaehlerFarbe) {\n            zaehlerFarbe = neueFarbe;\n            zaehler = 0;\n        }\n    \n        zaehler += 1;\n        //Wenn der Zähler die Vorgabe ereicht hat wird die neue Farbe festgelegt\n        if (zaehler == vorgabeZaehler) {\n            festgelegteFarbe = neueFarbe;\n            hatGeaendert = true;\n        }\n    }\n    //Daten speichern\n    context.set(\"festgelegteFarbe\", festgelegteFarbe);\n    context.set(\"zaehlerFarbe\", zaehlerFarbe);\n    context.set(\"zaehler\", zaehler);\n} \n\n\n\n//Farbe ausgeben bei jedem Zyklussignal\nif (hatGeaendert == true) {\n    msg.topic = \"Farbe\";\n    msg.payload = festgelegteFarbe;\n    return msg;\n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 980,
        "wires": [
            [
                "39423da9ebe477ec",
                "8b5b896bc46eb0c4",
                "490d41528797a6eb"
            ]
        ]
    },
    {
        "id": "fde960d3d7526fc4",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 1150,
        "y": 1600,
        "wires": [
            [
                "490d41528797a6eb"
            ]
        ]
    },
    {
        "id": "fd0e39508bf5a76f",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar itemAktiv = context.get(\"itemAktiv\") || false;\nvar anzahlRoboter = context.get(\"anzahlRoboter\") || 1;\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Variablen definieren\n\nvar roboterAktiv;\n\n\n\n\n\n\n\n//Anzahl Roboter aktualisieren\nif (msg.topic == \"robotCount\") {\n    anzahlRoboter = msg.payload;\n}\n\n\n//itemAktiv aktualisieren\nif (msg.topic == \"itemAufRoboter\") {\n    itemAktiv = msg.payload;\n}\n\n//node.warn(roboterNummer.toString() + anzahlRoboter);\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else if (msg.payload == \"Vorbereiten\"){\n        spielLauft = false;\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n}\n\n//Definieren ob der Roboter aktiv ist oder nicht\n//Er ist aktiv wenn die Anzahl Roboter nicht kleiner ist als seine Nummer und wenn das Spiel läuft\nif ((roboterNummer <= anzahlRoboter) && (spielLauft == true)) {\n    roboterAktiv = true;\n} else {\n    roboterAktiv = false;\n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n        //Item wirkt auf diesen Roboter\n        else if (itemAktiv == true) {\n            Zustand = \"Beeinflusst von Item\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Beeinflusst von Item\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        //Item ist nicht mehr aktiv\n        else if (itemAktiv == false) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n      \n      \n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (roboterAktiv == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Item wirkt auf diesen Roboter\n            else if (itemAktiv == true) {\n                Zustand = \"Beeinflusst von Item\";\n            }\n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"itemAktiv\", itemAktiv);\ncontext.set(\"anzahlRoboter\", anzahlRoboter);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "a1f039d378d4517a",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1540,
        "wires": []
    },
    {
        "id": "96eda3d6232e4f90",
        "type": "link in",
        "z": "7aa9951234ca3c4a",
        "name": "RobotCount",
        "links": [
            "405564b062d28697"
        ],
        "x": 1150,
        "y": 1500,
        "wires": [
            [
                "490d41528797a6eb"
            ]
        ],
        "l": true
    },
    {
        "id": "83312faa5ce43b75",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Geschwindigkeit mit Status ändern",
        "func": "//initialisierungsobjekt speed definieren\nlet speed = {\n  links: 127,  \n  rechts: 127\n}\n\n\n\n\n\n\n\n//Eingabe abrufen\nvar speedEingabe = context.get(\"speedEingabe\") || speed;\n\n\n\nif (msg.topic == \"Zustand\") {\n    //Zustand definieren\n    var Zustand = msg.payload;\n    \n    //Variablen definieren\n    let speedAusgabe = {\n        links: speedEingabe.links,\n        rechts: speedEingabe.rechts\n    }\n    \n    if (Zustand == \"Normal Fahren\") {\n        speedAusgabe.links = speedEingabe.links / 3;\n        speedAusgabe.rechts = speedEingabe.rechts / 3;\n    }\n\n\n    if (Zustand == \"Boost\") {\n        speedAusgabe.links = speedEingabe.links;\n        speedAusgabe.rechts = speedEingabe.rechts;\n    }\n    \n    if (Zustand == \"Langsamer\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    if (Zustand == \"Freie Fahrt\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    //Roboter fährt rückwärts, wenn er im Abseits ist\n    if (Zustand == \"Abseits der Strecke\") {\n        speedAusgabe.links = -22;\n        speedAusgabe.rechts = -22;\n    }\n\n    //Roboter anhalten, wenn er nicht aktiv ist\n    if (Zustand == \"Nicht Aktiv\") {\n        speedAusgabe.links = 0;\n        speedAusgabe.rechts = 0;\n    }\n    \n    //Geschwindigkeit runden\n    speedAusgabe.links = Math.floor(speedAusgabe.links);\n    speedAusgabe.rechts = Math.floor(speedAusgabe.rechts);\n    \n\n    //Geschwindigkeit ausgeben und umskalieren\n    msg.topic = \"speedBothMotors\"\n    msg.payload = [speedAusgabe.links + 127, speedAusgabe.rechts + 127];\n    return msg;\n    \n\n} else if (msg.topic == \"speedBothMotors\") {\n    //Geschwindigkeit aktualisieren und runden\n    speedEingabe.links = Math.floor(msg.payload[0]);\n    speedEingabe.rechts = Math.floor(msg.payload[1]);\n    context.set(\"speedEingabe\", speedEingabe);\n    \n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "3b0c4d24c21d5421",
                "44d73b4948c83411"
            ]
        ]
    },
    {
        "id": "44d73b4948c83411",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 680,
        "wires": []
    },
    {
        "id": "2a462439eb773600",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 800,
        "wires": []
    },
    {
        "id": "ae91e6b2187b01d3",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 620,
        "wires": []
    },
    {
        "id": "39423da9ebe477ec",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 920,
        "wires": []
    },
    {
        "id": "2dd4710b541e7c36",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 920,
        "wires": []
    },
    {
        "id": "8ada1395ca16bfdb",
        "type": "change",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "robotNr",
                "pt": "flow",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "8b5b896bc46eb0c4",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Position festlegen",
        "func": "//Daten abrufen\nvar farbe = context.get(\"farbe\") || \"schwarz\";\nvar position = context.get(\"position\") || 10;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar runden = context.get(\"runden\") || 0;\n\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n\n//Wenn Spiel nicht mehr läuft, wird alles initialisiert\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft nicht\" || msg.payload == \"Der Countdown lauft\") {\n        position = 10;\n        runden = 0;        \n    }\n\n}\n\n\n\n\n//State Machine\nswitch(position) {\n\n        \n    case 10: //Start\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 20;\n        }\n        break;\n    case 20: //Erstes Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 30;\n        }\n        break; \n        \n        \n    case 30: //Erster Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"schwarz\") {\n            position = 40;\n        }\n        break; \n        \n        \n    case 40: //Verlangsamungsfeld\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 50;\n        }\n        break;\n    case 50: //Zweites Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 60;\n        }\n        break; \n        \n        \n    case 60: //Zweiter Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Ziel erreicht\n        if (farbe == \"schwarz\") {\n            runden += 1;\n            position = 10;\n        }\n        break;        \n    \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Die aktuelle Roboterposition ist ungültig. Die Position heisst:\" + position);\n    break;\n}\n\n//NACHHER LÖSCHEN (nur zum debuggen)\n//darfHierFahren = true;\n\n//Daten speichern\ncontext.set(\"farbe\", farbe);\ncontext.set(\"position\", position);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"runden\", runden);\n\nmsg.topic = \"darfHierFahren\";\nmsg.payload = [darfHierFahren, position, runden];\n\n\n//Signal schicken, dass Roboter alle Runden beendet hat\nif (runden >= 3) {\n    var msg2 = {\n        topic: \"fertig\",\n        payload: robotNr\n    }\n    return [msg, msg2];\n    \n} else { //Nur Message schicken\n\n    return msg;\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1240,
        "wires": [
            [
                "3eda15890161ca7a",
                "822c32a7dac41ef4",
                "490d41528797a6eb"
            ],
            [
                "3eda15890161ca7a",
                "6c94ee7e41929ad9"
            ]
        ]
    },
    {
        "id": "5e81d2fe580b3edd",
        "type": "link in",
        "z": "7aa9951234ca3c4a",
        "name": "Spielstatus",
        "links": [
            "bfc31b720c3638f6"
        ],
        "x": 1040,
        "y": 1240,
        "wires": [
            [
                "8b5b896bc46eb0c4",
                "c2eb6f598066466e",
                "490d41528797a6eb",
                "b17afb876af35b30"
            ]
        ],
        "l": true
    },
    {
        "id": "3eda15890161ca7a",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c2eb6f598066466e",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 1120,
        "wires": []
    },
    {
        "id": "23cbd0e66b022c12",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "gruen",
        "payloadType": "str",
        "x": 1010,
        "y": 1300,
        "wires": [
            [
                "8b5b896bc46eb0c4"
            ]
        ]
    },
    {
        "id": "5633f95f32349aa3",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "dunkelgruen",
        "payloadType": "str",
        "x": 1030,
        "y": 1340,
        "wires": [
            [
                "8b5b896bc46eb0c4"
            ]
        ]
    },
    {
        "id": "6c94ee7e41929ad9",
        "type": "link out",
        "z": "7aa9951234ca3c4a",
        "name": "Roboter hat Rennen beendet",
        "mode": "link",
        "links": [
            "15227b16ba1dd957"
        ],
        "x": 1820,
        "y": 1240,
        "wires": [],
        "l": true
    },
    {
        "id": "22735c6314329934",
        "type": "delay",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2300,
        "y": 800,
        "wires": [
            [
                "2a462439eb773600"
            ]
        ]
    },
    {
        "id": "44fa6373395db742",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "Roboternummer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "8ada1395ca16bfdb"
            ]
        ]
    },
    {
        "id": "e59e2115e1c11268",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Geschwindigkeit senden",
        "func": "\n//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n//Vorherige Daten werden abgerufen\nvar data = context.get('data')|| [127,127,robotNr];\n\n\nif(msg.topic == \"speedBothMotors\"){\n    data = msg.payload;\n    msg.topic = \"speedBothMotors\";\n\n}\n\ncontext.set(\"data\", data);\n\n\nif (msg.topic == \"CLK\") {\n    msg.payload = \"\";\n    msg.payload = data[0] + \",\" + data[1] + \",\" + data [2];\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 640,
        "wires": [
            [
                "82096e07638bed12",
                "fc7f81c31eb52345"
            ]
        ]
    },
    {
        "id": "82096e07638bed12",
        "type": "serial out",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "serial": "e341ce52d8147dfa",
        "x": 2850,
        "y": 640,
        "wires": []
    },
    {
        "id": "c6e6bc6b788982e3",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 2010,
        "y": 800,
        "wires": [
            [
                "e59e2115e1c11268"
            ]
        ]
    },
    {
        "id": "fc7f81c31eb52345",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2770,
        "y": 800,
        "wires": []
    },
    {
        "id": "78c3c3d1fd3254a1",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "FarbbereichserkennungORIGINAL",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3510, 3010, 2610, 2220, 1800, 1430, 1180, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"dunkel1gruen\", \"dunkel1blau\", \"dunkel1rot\", \"dunkel2rot\", \"dunkel2blau\", \"dunkel3blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "e15c8cc363dd60b7",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "blau",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"blau\",\"blau\"]",
        "payloadType": "json",
        "x": 730,
        "y": 1260,
        "wires": [
            [
                "5305bda810dea05d"
            ]
        ]
    },
    {
        "id": "35057dc14034644f",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "weiss",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"weiss\",\"weiss\"]",
        "payloadType": "json",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "5305bda810dea05d"
            ]
        ]
    },
    {
        "id": "cf9c39d4590fe9d2",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "rot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"rot\",\"rot\"]",
        "payloadType": "json",
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "5305bda810dea05d"
            ]
        ]
    },
    {
        "id": "828a4ff3eba1a73a",
        "type": "inject",
        "z": "7aa9951234ca3c4a",
        "name": "schwarz",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"schwarz\",\"schwarz\"]",
        "payloadType": "json",
        "x": 740,
        "y": 1340,
        "wires": [
            [
                "5305bda810dea05d"
            ]
        ]
    },
    {
        "id": "b8b0848e9b8db5ac",
        "type": "ui_button",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "group": "5e8a52f455b56a75",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop Roboter",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "Speed",
        "topicType": "str",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "2fd5f5fe1f4b15e0"
            ]
        ]
    },
    {
        "id": "5e844a78e615b7fd",
        "type": "ui_text",
        "z": "7aa9951234ca3c4a",
        "group": "5e8a52f455b56a75",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Runde: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1960,
        "y": 1160,
        "wires": []
    },
    {
        "id": "822c32a7dac41ef4",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Runde rauslesen",
        "func": "var runde = msg.payload[2];\nmsg.payload = runde + \"/3\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1160,
        "wires": [
            [
                "5e844a78e615b7fd"
            ]
        ]
    },
    {
        "id": "0462e273c5b42021",
        "type": "ui_text",
        "z": "7aa9951234ca3c4a",
        "group": "5e8a52f455b56a75",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Lenkung",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 160,
        "y": 460,
        "wires": []
    },
    {
        "id": "5e3c8501d5387ac2",
        "type": "ui_text",
        "z": "7aa9951234ca3c4a",
        "group": "5e8a52f455b56a75",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Geschwindigkeit",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 180,
        "y": 580,
        "wires": []
    },
    {
        "id": "490d41528797a6eb",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Neue State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar farbe = context.get(\"farbe\") || \"schwarz\";\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else {\n        spielLauft = false;\n    }\n    //Freie Fahrt um in das Startfeld zu fahren\n    if (msg.payload == \"Vorbereiten\"){\n        Zustand = \"Freie Fahrt\";\n    }\n    //Beim Countdown muss der Roboter stehen bleiben\n    if (msg.payload == \"Der Countdown lauft\") {\n        Zustand = \"Nicht Aktiv\";\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n    \n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Freie Fahrt\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n      \n    case \"Boost\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }        \n        break;\n        \n    case \"Langsamer\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }      \n        break;\n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"farbe\", farbe);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1580,
        "wires": [
            [
                "a1f039d378d4517a",
                "83312faa5ce43b75",
                "a357654b23f8e1c4"
            ]
        ]
    },
    {
        "id": "b17afb876af35b30",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Roboter Stoppen",
        "func": "\n//Damit ein Roboter nicht von selber anfährt, wenn das Spiel neugestartet wird, wird hier die Geschwindigkeit auf 0 gesetzt\nif (msg.payload == \"Spiel lauft nicht\") {\n    msg.topic = \"Speed\";\n    msg.payload = 0;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 640,
        "wires": [
            [
                "2fd5f5fe1f4b15e0"
            ]
        ]
    },
    {
        "id": "41a19b6bb4291bc7",
        "type": "trigger",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "200",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 730,
        "y": 400,
        "wires": [
            [
                "b902e4dcf16cb6bc"
            ]
        ]
    },
    {
        "id": "b902e4dcf16cb6bc",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Bei Inaktivität Speed auf 0 setzen",
        "func": "msg.topic = \"Speed\";\nmsg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 400,
        "wires": [
            [
                "2fd5f5fe1f4b15e0"
            ]
        ]
    },
    {
        "id": "f35fda34fbdb9604",
        "type": "trigger",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "15",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2190,
        "y": 1580,
        "wires": [
            [
                "ac3a2c154635a89a"
            ]
        ]
    },
    {
        "id": "ac3a2c154635a89a",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Spiel abbrechen, weil Roboter feststeckt",
        "func": "msg.topic = \"stop\";\nmsg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 1720,
        "wires": [
            [
                "92a7756381111c88",
                "7ed5b8d2b2aec65e"
            ]
        ]
    },
    {
        "id": "a357654b23f8e1c4",
        "type": "function",
        "z": "7aa9951234ca3c4a",
        "name": "Filter für Abseits der Strecke",
        "func": "if (msg.payload != \"Abseits der Strecke\") {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 1580,
        "wires": [
            [
                "f35fda34fbdb9604"
            ]
        ]
    },
    {
        "id": "92a7756381111c88",
        "type": "debug",
        "z": "7aa9951234ca3c4a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1940,
        "wires": []
    },
    {
        "id": "7ed5b8d2b2aec65e",
        "type": "link out",
        "z": "7aa9951234ca3c4a",
        "name": "Spiel beenden, Roboter inaktiv",
        "mode": "link",
        "links": [
            "5f8f076a44e437a6"
        ],
        "x": 2430,
        "y": 1720,
        "wires": [],
        "l": true
    },
    {
        "id": "b8bf386f3db64770",
        "type": "ui_slider",
        "z": "3c78f5faa301e154",
        "name": "",
        "label": "",
        "tooltip": "Den Roboter lenken",
        "group": "36d2a87e1baa759c",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "LeftRight",
        "topicType": "str",
        "min": "-60",
        "max": "60",
        "step": "1",
        "className": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "a781e19afc0dc6ca"
            ]
        ]
    },
    {
        "id": "289449599a34f7a1",
        "type": "ui_slider",
        "z": "3c78f5faa301e154",
        "name": "",
        "label": "",
        "tooltip": "Geschwindigkeit regeln",
        "group": "36d2a87e1baa759c",
        "order": 4,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "Speed",
        "topicType": "str",
        "min": "-127",
        "max": "127",
        "step": "1",
        "className": "",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "a781e19afc0dc6ca"
            ]
        ]
    },
    {
        "id": "56b5628e65233c92",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Roboter-Befehle Umrechnen",
        "func": "//Vorherige Daten werden abgerufen\nvar LeftRight = context.get('LeftRight')||0; //Initialwert 0, wenn es Variable noch nicht gibttt\nvar Speed = context.get('Speed')||0;\n\n//Variablen definieren\nvar speedLeft = 0;\nvar speedRight = 0;\nvar zuViel = 0;\n\n//Die Daten werden ins Programm übernommen\nif(msg.topic === \"LeftRight\"){\n    LeftRight = msg.payload;\n}\n\nif(msg.topic === \"Speed\"){\n    Speed = msg.payload;\n}\n\n//Eingabedaten werden zwischengespeichert\ncontext.set('LeftRight',LeftRight);\ncontext.set('Speed',Speed);\n\n\n\n//Speed wird gedrosselt\nSpeed = Speed;\n\n\n//Die Geschwindigkeiten der beiden Motoren werden anhand der Eingaben berechnet\nif (LeftRight < 0) {\n    //Roboter lenkt nach links\n    speedRight = Speed;\n    speedLeft = (LeftRight * 2 + 127) * Speed / 127;\n    \n} else if (LeftRight > 0) {\n    //Roboter lenkt nach rechts\n    speedLeft = Speed;\n    speedRight = (-LeftRight * 2 + 127) * Speed / 127;\n    \n    //Roboter fährt geradeaus\n} else {\n    speedLeft = Speed;\n    speedRight = Speed;\n}\n\n\n\n\n\n\n\n\n//Wenn der \"speed\"-Slider nahe bei 0 ist, werden beide Motoren auf 0 gestellt\nif (Speed <= 10 && Speed >= -10) {\n    speedLeft = 0;\n    speedRight = 0;\n}\n\n\n//Die Geschwindigkeit wird von -127 bis 127 zu 0 bis 255 umskaliert\n//speedLeft = speedLeft + 127;\n//speedRight = speedRight + 127;\n\n//Daten ausgeben\nmsg.topic = \"speedBothMotors\"\nmsg.payload = [speedLeft, speedRight];\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 540,
        "wires": [
            [
                "a5138cec734168f5",
                "19fda30b4a4dcf7e"
            ]
        ]
    },
    {
        "id": "a781e19afc0dc6ca",
        "type": "delay",
        "z": "3c78f5faa301e154",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 540,
        "wires": [
            [
                "56b5628e65233c92",
                "21416e3564a3a19e"
            ]
        ]
    },
    {
        "id": "ad413aa44be512d9",
        "type": "link out",
        "z": "3c78f5faa301e154",
        "name": "Steuerdaten",
        "mode": "link",
        "links": [
            "0cf45c5f6f3262b2"
        ],
        "x": 2750,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "d0cb152933e42b77",
        "type": "link in",
        "z": "3c78f5faa301e154",
        "name": "Sensordaten",
        "links": [
            "73901a071c6bdb9d"
        ],
        "x": 190,
        "y": 960,
        "wires": [
            [
                "8d3877dc5ec0697f"
            ]
        ],
        "l": true
    },
    {
        "id": "8d3877dc5ec0697f",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Sensordaten filtern",
        "func": "var roboterNr = flow.get(\"robotNr\") || 1;\n\n\n//Farben definieren\nvar sensordatenArray = msg.payload.split(\",\");\n//code wird nur ausgeführt, wenn es an diesen Roboter adressiert ist\nif(sensordatenArray[0] === \"R\" + roboterNr.toString()){\n    var L1 = sensordatenArray[1];\n    var R1 = sensordatenArray[2];\n    msg.topic = \"sensorDaten\";\n    \n    //Daten ausgeben\n    msg.payload = [L1, R1];\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 960,
        "wires": [
            [
                "4db92720e1016efa",
                "137b34eee26c7232"
            ]
        ]
    },
    {
        "id": "8d9a2451f4db9754",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Roboter-Nummer anfügen",
        "func": "//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n//Bei Programmbeginn Roboternummer festlegen\nif(msg.topic == \"robotNr\"){\n    robotNr = msg.payload;\n}\n\n\nif(msg.topic == \"speedBothMotors\"){\n    msg.topic = \"speedBothMotors\";\n    msg.payload[2] = robotNr;\n    return msg;\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 540,
        "wires": [
            [
                "ac81c6c303e8800c",
                "ad413aa44be512d9",
                "f656f9be53e61101"
            ]
        ]
    },
    {
        "id": "4db92720e1016efa",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Farbbereichserkennung Roboter1",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3600, 2100, 1350, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"rot\", \"blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 960,
        "wires": [
            [
                "1324ce150fd13a28"
            ]
        ]
    },
    {
        "id": "1324ce150fd13a28",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Farbe festlegen",
        "func": "//Vorherige Daten abrufen\nvar festgelegteFarbe = context.get(\"festgelegteFarbe\")||\"undefiniert\"; //die Farbe, welche als Output ausgegeben wird\nvar zaehlerFarbe = context.get(\"zaehlerFarbe\")||\"undefiniert\"; //Die Farbe die zuletzt erkannt wurde, und gezählt wird\nvar zaehler = context.get(\"zaehler\")||0; //Zählt wie oft schon die gleiche Farbe erkannt wurde\nvar hatGeaendert = false;\n\n//vorgabeZaehler gibt an, wie oft die gleiche Farbe erkennt werden muss, bis die neue Farbe festgelegt wird\nvar vorgabeZaehler = 2;\n\nif (msg.topic == \"farben\") {\n    //Die Farbe des Sensors L1 wird hier verwendet \n    var neueFarbe = msg.payload[1];\n    //Wenn die Farbe ungleich der festgelegten Farbe ist\n    if (neueFarbe != festgelegteFarbe) {\n        //Wenn zuletzt eine andere Farbe gemessen wurde wird der Zähler zurückgesetzt\n        if (neueFarbe != zaehlerFarbe) {\n            zaehlerFarbe = neueFarbe;\n            zaehler = 0;\n        }\n    \n        zaehler += 1;\n        //Wenn der Zähler die Vorgabe ereicht hat wird die neue Farbe festgelegt\n        if (zaehler == vorgabeZaehler) {\n            festgelegteFarbe = neueFarbe;\n            hatGeaendert = true;\n        }\n    }\n    //Daten speichern\n    context.set(\"festgelegteFarbe\", festgelegteFarbe);\n    context.set(\"zaehlerFarbe\", zaehlerFarbe);\n    context.set(\"zaehler\", zaehler);\n} \n\n\n\n//Farbe ausgeben bei jedem Zyklussignal\nif (hatGeaendert == true) {\n    msg.topic = \"Farbe\";\n    msg.payload = festgelegteFarbe;\n    return msg;\n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 960,
        "wires": [
            [
                "4d4111b955c07cfe",
                "ce972036cfb7798f",
                "06fb28c1f0e4262f"
            ]
        ]
    },
    {
        "id": "c7b81d38d4695283",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 1170,
        "y": 1580,
        "wires": [
            [
                "06fb28c1f0e4262f"
            ]
        ]
    },
    {
        "id": "5566e566de44d7f3",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar itemAktiv = context.get(\"itemAktiv\") || false;\nvar anzahlRoboter = context.get(\"anzahlRoboter\") || 1;\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Variablen definieren\n\nvar roboterAktiv;\n\n\n\n\n\n\n\n//Anzahl Roboter aktualisieren\nif (msg.topic == \"robotCount\") {\n    anzahlRoboter = msg.payload;\n}\n\n\n//itemAktiv aktualisieren\nif (msg.topic == \"itemAufRoboter\") {\n    itemAktiv = msg.payload;\n}\n\n//node.warn(roboterNummer.toString() + anzahlRoboter);\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else if (msg.payload == \"Vorbereiten\"){\n        spielLauft = false;\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n}\n\n//Definieren ob der Roboter aktiv ist oder nicht\n//Er ist aktiv wenn die Anzahl Roboter nicht kleiner ist als seine Nummer und wenn das Spiel läuft\nif ((roboterNummer <= anzahlRoboter) && (spielLauft == true)) {\n    roboterAktiv = true;\n} else {\n    roboterAktiv = false;\n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n        //Item wirkt auf diesen Roboter\n        else if (itemAktiv == true) {\n            Zustand = \"Beeinflusst von Item\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Beeinflusst von Item\":\n        //Der Roboter ist nicht aktiv\n        if (roboterAktiv == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        //Item ist nicht mehr aktiv\n        else if (itemAktiv == false) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n      \n      \n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (roboterAktiv == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Item wirkt auf diesen Roboter\n            else if (itemAktiv == true) {\n                Zustand = \"Beeinflusst von Item\";\n            }\n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"itemAktiv\", itemAktiv);\ncontext.set(\"anzahlRoboter\", anzahlRoboter);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "f8709b0f28a48a5d",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3eed35d182a3874f",
        "type": "link in",
        "z": "3c78f5faa301e154",
        "name": "RobotCount",
        "links": [
            "405564b062d28697"
        ],
        "x": 1170,
        "y": 1480,
        "wires": [
            [
                "06fb28c1f0e4262f"
            ]
        ],
        "l": true
    },
    {
        "id": "a5138cec734168f5",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Geschwindigkeit mit Status ändern",
        "func": "//initialisierungsobjekt speed definieren\nlet speed = {\n  links: 127,  \n  rechts: 127\n}\n\n\n\n\n\n\n\n//Eingabe abrufen\nvar speedEingabe = context.get(\"speedEingabe\") || speed;\n\n\n\nif (msg.topic == \"Zustand\") {\n    //Zustand definieren\n    var Zustand = msg.payload;\n    \n    //Variablen definieren\n    let speedAusgabe = {\n        links: speedEingabe.links,\n        rechts: speedEingabe.rechts\n    }\n    \n    if (Zustand == \"Normal Fahren\") {\n        speedAusgabe.links = speedEingabe.links / 3;\n        speedAusgabe.rechts = speedEingabe.rechts / 3;\n    }\n\n\n    if (Zustand == \"Boost\") {\n        speedAusgabe.links = speedEingabe.links;\n        speedAusgabe.rechts = speedEingabe.rechts;\n    }\n    \n    if (Zustand == \"Langsamer\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    if (Zustand == \"Freie Fahrt\") {\n        speedAusgabe.links = speedEingabe.links / 5;\n        speedAusgabe.rechts = speedEingabe.rechts / 5;\n    }\n    \n    //Roboter fährt rückwärts, wenn er im Abseits ist\n    if (Zustand == \"Abseits der Strecke\") {\n        speedAusgabe.links = -22;\n        speedAusgabe.rechts = -22;\n    }\n\n    //Roboter anhalten, wenn er nicht aktiv ist\n    if (Zustand == \"Nicht Aktiv\") {\n        speedAusgabe.links = 0;\n        speedAusgabe.rechts = 0;\n    }\n    \n    //Geschwindigkeit runden\n    speedAusgabe.links = Math.floor(speedAusgabe.links);\n    speedAusgabe.rechts = Math.floor(speedAusgabe.rechts);\n    \n\n    //Geschwindigkeit ausgeben und umskalieren\n    msg.topic = \"speedBothMotors\"\n    msg.payload = [speedAusgabe.links + 127, speedAusgabe.rechts + 127];\n    return msg;\n    \n\n} else if (msg.topic == \"speedBothMotors\") {\n    //Geschwindigkeit aktualisieren und runden\n    speedEingabe.links = Math.floor(msg.payload[0]);\n    speedEingabe.rechts = Math.floor(msg.payload[1]);\n    context.set(\"speedEingabe\", speedEingabe);\n    \n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 540,
        "wires": [
            [
                "8d9a2451f4db9754",
                "717bdabe56ce9389"
            ]
        ]
    },
    {
        "id": "717bdabe56ce9389",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 660,
        "wires": []
    },
    {
        "id": "ad5a28fea8e0ce9d",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2530,
        "y": 780,
        "wires": []
    },
    {
        "id": "19fda30b4a4dcf7e",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 600,
        "wires": []
    },
    {
        "id": "4d4111b955c07cfe",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 900,
        "wires": []
    },
    {
        "id": "137b34eee26c7232",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 900,
        "wires": []
    },
    {
        "id": "4a4ff3509264f44a",
        "type": "change",
        "z": "3c78f5faa301e154",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "robotNr",
                "pt": "flow",
                "to": "4",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ce972036cfb7798f",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Position festlegen",
        "func": "//Daten abrufen\nvar farbe = context.get(\"farbe\") || \"schwarz\";\nvar position = context.get(\"position\") || 10;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar runden = context.get(\"runden\") || 0;\n\nvar robotNr = flow.get(\"robotNr\") || 1;\n\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n\n//Wenn Spiel nicht mehr läuft, wird alles initialisiert\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft nicht\" || msg.payload == \"Der Countdown lauft\") {\n        position = 10;\n        runden = 0;        \n    }\n\n}\n\n\n\n\n//State Machine\nswitch(position) {\n\n        \n    case 10: //Start\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 20;\n        }\n        break;\n    case 20: //Erstes Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 30;\n        }\n        break; \n        \n        \n    case 30: //Erster Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"schwarz\") {\n            position = 40;\n        }\n        break; \n        \n        \n    case 40: //Verlangsamungsfeld\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"blau\") {\n            position = 50;\n        }\n        break;\n    case 50: //Zweites Blau\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Nächster Bereich\n        if (farbe == \"rot\") {\n            position = 60;\n        }\n        break; \n        \n        \n    case 60: //Zweiter Boost\n        //Darf hier fahren oder nicht   \n        \n        if (farbe == \"weiss\") {\n            darfHierFahren = false;\n        } else {\n            darfHierFahren = true;\n        }\n \n        \n        //Ziel erreicht\n        if (farbe == \"schwarz\") {\n            runden += 1;\n            position = 10;\n        }\n        break;        \n    \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Die aktuelle Roboterposition ist ungültig. Die Position heisst:\" + position);\n    break;\n}\n\n//NACHHER LÖSCHEN (nur zum debuggen)\n//darfHierFahren = true;\n\n//Daten speichern\ncontext.set(\"farbe\", farbe);\ncontext.set(\"position\", position);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"runden\", runden);\n\nmsg.topic = \"darfHierFahren\";\nmsg.payload = [darfHierFahren, position, runden];\n\n\n//Signal schicken, dass Roboter alle Runden beendet hat\nif (runden >= 3) {\n    var msg2 = {\n        topic: \"fertig\",\n        payload: robotNr\n    }\n    return [msg, msg2];\n    \n} else { //Nur Message schicken\n\n    return msg;\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1220,
        "wires": [
            [
                "7312c54e8f84f388",
                "e9f1ddd7eed87ea4",
                "06fb28c1f0e4262f"
            ],
            [
                "7312c54e8f84f388",
                "8193e062eb7feb0f"
            ]
        ]
    },
    {
        "id": "c5f04cf70acddc9d",
        "type": "link in",
        "z": "3c78f5faa301e154",
        "name": "Spielstatus",
        "links": [
            "bfc31b720c3638f6"
        ],
        "x": 1060,
        "y": 1220,
        "wires": [
            [
                "ce972036cfb7798f",
                "204ad13836e8eb80",
                "06fb28c1f0e4262f",
                "bf774eea18a22a0d"
            ]
        ],
        "l": true
    },
    {
        "id": "7312c54e8f84f388",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1320,
        "wires": []
    },
    {
        "id": "204ad13836e8eb80",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1100,
        "wires": []
    },
    {
        "id": "1b789d2483b307a5",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "gruen",
        "payloadType": "str",
        "x": 1030,
        "y": 1280,
        "wires": [
            [
                "ce972036cfb7798f"
            ]
        ]
    },
    {
        "id": "79847c8348970836",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Farbe",
        "payload": "dunkelgruen",
        "payloadType": "str",
        "x": 1050,
        "y": 1320,
        "wires": [
            [
                "ce972036cfb7798f"
            ]
        ]
    },
    {
        "id": "8193e062eb7feb0f",
        "type": "link out",
        "z": "3c78f5faa301e154",
        "name": "Roboter hat Rennen beendet",
        "mode": "link",
        "links": [
            "15227b16ba1dd957"
        ],
        "x": 1840,
        "y": 1220,
        "wires": [],
        "l": true
    },
    {
        "id": "ac81c6c303e8800c",
        "type": "delay",
        "z": "3c78f5faa301e154",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2320,
        "y": 780,
        "wires": [
            [
                "ad5a28fea8e0ce9d"
            ]
        ]
    },
    {
        "id": "69e614f99504c3f4",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "Roboternummer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payloadType": "date",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "4a4ff3509264f44a"
            ]
        ]
    },
    {
        "id": "f656f9be53e61101",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Geschwindigkeit senden",
        "func": "\n//Roboternummer abrufen\nvar robotNr = flow.get(\"robotNr\") || 1;\n//Vorherige Daten werden abgerufen\nvar data = context.get('data')|| [127,127,robotNr];\n\n\nif(msg.topic == \"speedBothMotors\"){\n    data = msg.payload;\n    msg.topic = \"speedBothMotors\";\n\n}\n\ncontext.set(\"data\", data);\n\n\nif (msg.topic == \"CLK\") {\n    msg.payload = \"\";\n    msg.payload = data[0] + \",\" + data[1] + \",\" + data [2];\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 620,
        "wires": [
            [
                "dc4f9dc02130d63e",
                "10c54f94ce5edf84"
            ]
        ]
    },
    {
        "id": "dc4f9dc02130d63e",
        "type": "serial out",
        "z": "3c78f5faa301e154",
        "name": "",
        "serial": "e341ce52d8147dfa",
        "x": 2870,
        "y": 620,
        "wires": []
    },
    {
        "id": "9131f560843b2d23",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.05",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CLK",
        "x": 2030,
        "y": 780,
        "wires": [
            [
                "f656f9be53e61101"
            ]
        ]
    },
    {
        "id": "10c54f94ce5edf84",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 780,
        "wires": []
    },
    {
        "id": "481a9af14e92b858",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "FarbbereichserkennungORIGINAL",
        "func": "\n//Variablen definieren\nvar sensorLinks = msg.payload[0];\nvar sensorRechts = msg.payload[1];\nvar farbeLinks;\nvar farbeRechts;\nvar sensorenUnterschiedlich;\n\n//Farbbereiche definieren\n//das farbbereiche-array muss 1 länger sein als \"farben\"\n//Wenn [4000, 2900] dann ist der erste Farbbereich: 4000 >= sensorWert > 2900\nvar farbbereiche = [4000, 3510, 3010, 2610, 2220, 1800, 1430, 1180, 0];\n\n//Farbnamen definieren\nvar farben = [\"weiss\", \"dunkel1gruen\", \"dunkel1blau\", \"dunkel1rot\", \"dunkel2rot\", \"dunkel2blau\", \"dunkel3blau\", \"schwarz\"];\n\n\nfunction farbeDefinieren(sensorWert, farbbereicheArray, farbenNamen) {\n    let anzahlFarben = farben.length;\n    for (let i = 0; i < anzahlFarben; i++) {\n        if (sensorWert <= farbbereicheArray[i] && sensorWert > farbbereicheArray[i + 1]) {\n            return farbenNamen[i];\n        }\n    }\n    return \"Fehler: in keinem Farbbereich vorhanden\";\n}\n\n//Funktion aufrufen\nfarbeLinks = farbeDefinieren(sensorLinks, farbbereiche, farben);\nfarbeRechts = farbeDefinieren(sensorRechts, farbbereiche, farben);\n\n\n\n\n//Farbe ausgeben\nmsg.topic = \"farben\";\nmsg.payload = [farbeLinks, farbeRechts];\n\nreturn msg;\n\n/*alte Farbbereiche\nvar farbbereiche = [4000,2900,2400,1800,800,0];\nvar farben = [\"weiss\", \"dunkelblau\", \"dunkelrot\", \"gruen\", \"schwarz\"];\n\nvar farbbereiche = [4000,3000,1500,0];\nvar farben = [\"weiss\", \"dunkelrot\", \"schwarz\"];\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "12567cf7cc97725b",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "blau",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"blau\",\"blau\"]",
        "payloadType": "json",
        "x": 750,
        "y": 1240,
        "wires": [
            [
                "1324ce150fd13a28"
            ]
        ]
    },
    {
        "id": "350a4003a5212af6",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "weiss",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"weiss\",\"weiss\"]",
        "payloadType": "json",
        "x": 750,
        "y": 1200,
        "wires": [
            [
                "1324ce150fd13a28"
            ]
        ]
    },
    {
        "id": "5828df95d7f58f2d",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "rot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"rot\",\"rot\"]",
        "payloadType": "json",
        "x": 750,
        "y": 1280,
        "wires": [
            [
                "1324ce150fd13a28"
            ]
        ]
    },
    {
        "id": "77a55932bb229950",
        "type": "inject",
        "z": "3c78f5faa301e154",
        "name": "schwarz",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "farben",
        "payload": "[\"schwarz\",\"schwarz\"]",
        "payloadType": "json",
        "x": 760,
        "y": 1320,
        "wires": [
            [
                "1324ce150fd13a28"
            ]
        ]
    },
    {
        "id": "61ef09766a3d97a6",
        "type": "ui_button",
        "z": "3c78f5faa301e154",
        "name": "",
        "group": "36d2a87e1baa759c",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop Roboter",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "Speed",
        "topicType": "str",
        "x": 510,
        "y": 460,
        "wires": [
            [
                "56b5628e65233c92"
            ]
        ]
    },
    {
        "id": "68503234809f8536",
        "type": "ui_text",
        "z": "3c78f5faa301e154",
        "group": "36d2a87e1baa759c",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Runde: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1980,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e9f1ddd7eed87ea4",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Runde rauslesen",
        "func": "var runde = msg.payload[2];\nmsg.payload = runde + \"/3\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1140,
        "wires": [
            [
                "68503234809f8536"
            ]
        ]
    },
    {
        "id": "f59e28cc5ccfab2f",
        "type": "ui_text",
        "z": "3c78f5faa301e154",
        "group": "36d2a87e1baa759c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Lenkung",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 180,
        "y": 440,
        "wires": []
    },
    {
        "id": "f25d82dc7461348e",
        "type": "ui_text",
        "z": "3c78f5faa301e154",
        "group": "36d2a87e1baa759c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Geschwindigkeit",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 200,
        "y": 560,
        "wires": []
    },
    {
        "id": "06fb28c1f0e4262f",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Neue State Machine",
        "func": "//Daten abrufen\nvar Zustand = context.get(\"Zustand\") || \"Nicht Aktiv\";\nvar spielLauft = context.get(\"spielLauft\") || false;\nvar darfHierFahren = context.get(\"darfHierFahren\") || false;\nvar farbe = context.get(\"farbe\") || \"schwarz\";\n\nvar roboterNummer = flow.get(\"robotNr\") || 1;\n\n//Farbe aktualisieren, wenn neues Farbsignal kommt\nif (msg.topic == \"Farbe\") {\n    farbe = msg.payload;\n}\n\n\n\n//roboterNummer aktualisieren\nif (msg.topic == \"robotNr\") {\n    roboterNummer = msg.payload;\n}\n\n\n//Spiellauft aktualisieren\nif (msg.topic == \"Spiel Status\") {\n    if (msg.payload == \"Spiel lauft\") {\n        spielLauft = true;\n    } else {\n        spielLauft = false;\n    }\n    //Freie Fahrt um in das Startfeld zu fahren\n    if (msg.payload == \"Vorbereiten\"){\n        Zustand = \"Freie Fahrt\";\n    }\n    //Beim Countdown muss der Roboter stehen bleiben\n    if (msg.payload == \"Der Countdown lauft\") {\n        Zustand = \"Nicht Aktiv\";\n    }\n}\n\n\n//Aktualisieren ob Roboter im Abseits ist\nif (msg.topic == \"darfHierFahren\") {\n    darfHierFahren = msg.payload[0];\n    \n}\n\n\n//State Machine\nswitch(Zustand) {\n    case \"Normal Fahren\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }\n        break;\n    \n    \n    \n    case \"Abseits der Strecke\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n        \n        //Der Roboter ist wieder auf der Strecke\n        else if (darfHierFahren == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n    \n    \n    \n    case \"Freie Fahrt\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            //Fährt ins Abseits\n            if (darfHierFahren == false) {\n                Zustand = \"Abseits der Strecke\";\n            }            \n            \n            \n            //Wenn sonst nichts ist, wird der Roboter wieder normal gesteuert\n            else {\n                Zustand = \"Normal Fahren\";\n            }\n        }\n        break;\n      \n    case \"Boost\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }\n        \n        //Muss langsamer fahren, weil er im schwarzen ist\n        else if (farbe == \"schwarz\") {\n            Zustand = \"Langsamer\";\n        }        \n        break;\n        \n    case \"Langsamer\":\n        //Der Roboter ist nicht aktiv\n        if (spielLauft == false) {\n            Zustand = \"Nicht Aktiv\";\n        }\n        \n\n\n        //Fährt ins Abseits\n        else if (darfHierFahren == false) {\n            Zustand = \"Abseits der Strecke\";\n        }\n        \n        \n\n        //Darf schneller fahren, weil er im roten ist\n        else if (farbe == \"rot\") {\n            Zustand = \"Boost\";\n        }\n        \n        //Fährt wieder normal schnell\n        else if (farbe == \"blau\") {\n            Zustand = \"Normal Fahren\";\n        }      \n        break;\n      \n    case \"Nicht Aktiv\":\n        //Dieser Zustand kann nur verlassen werden, wenn der Roboter aktiv ist\n        if (spielLauft == true) {\n            Zustand = \"Normal Fahren\";\n        }\n        break;\n        \n        \n        \n        \n    //Kein gültiger Zustand\n    default:\n    node.warn(\"Der aktuelle Zustand des Roboters ist ungültig. Der Zustand heisst:\" + Zustand);\n    break;\n}\n\n\n\n//Daten speichern\ncontext.set(\"Zustand\", Zustand);\ncontext.set(\"spielLauft\", spielLauft);\ncontext.set(\"darfHierFahren\", darfHierFahren);\ncontext.set(\"farbe\", farbe);\n\n\n//Beim CLK Signal den Status übertragen\nif (msg.topic == \"CLK\") {\n    msg.topic = \"Zustand\";\n    msg.payload = Zustand;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1560,
        "wires": [
            [
                "f8709b0f28a48a5d",
                "a5138cec734168f5",
                "d3cea5406d8947c5"
            ]
        ]
    },
    {
        "id": "bf774eea18a22a0d",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Roboter Stoppen",
        "func": "\n//Damit ein Roboter nicht von selber anfährt, wenn das Spiel neugestartet wird, wird hier die Geschwindigkeit auf 0 gesetzt\nif (msg.payload == \"Spiel lauft nicht\") {\n    msg.topic = \"Speed\";\n    msg.payload = 0;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 620,
        "wires": [
            [
                "56b5628e65233c92"
            ]
        ]
    },
    {
        "id": "21416e3564a3a19e",
        "type": "trigger",
        "z": "3c78f5faa301e154",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "200",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 750,
        "y": 380,
        "wires": [
            [
                "f6df6ab28d96e7c8"
            ]
        ]
    },
    {
        "id": "f6df6ab28d96e7c8",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Bei Inaktivität Speed auf 0 setzen",
        "func": "msg.topic = \"Speed\";\nmsg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "56b5628e65233c92"
            ]
        ]
    },
    {
        "id": "6c7543212bb871de",
        "type": "trigger",
        "z": "3c78f5faa301e154",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "50",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2210,
        "y": 1560,
        "wires": [
            [
                "3568bb0b3fdf591e"
            ]
        ]
    },
    {
        "id": "3568bb0b3fdf591e",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Spiel abbrechen, weil Roboter feststeckt",
        "func": "msg.topic = \"stop\";\nmsg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1700,
        "wires": [
            [
                "f5b86e2fe6ec6b5d",
                "6f5e7c39249e6e11"
            ]
        ]
    },
    {
        "id": "d3cea5406d8947c5",
        "type": "function",
        "z": "3c78f5faa301e154",
        "name": "Filter für Abseits der Strecke",
        "func": "if (msg.payload != \"Abseits der Strecke\") {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 1560,
        "wires": [
            [
                "6c7543212bb871de"
            ]
        ]
    },
    {
        "id": "f5b86e2fe6ec6b5d",
        "type": "debug",
        "z": "3c78f5faa301e154",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1920,
        "wires": []
    },
    {
        "id": "6f5e7c39249e6e11",
        "type": "link out",
        "z": "3c78f5faa301e154",
        "name": "Spiel beenden, Roboter inaktiv",
        "mode": "link",
        "links": [
            "5f8f076a44e437a6"
        ],
        "x": 2450,
        "y": 1700,
        "wires": [],
        "l": true
    }
]